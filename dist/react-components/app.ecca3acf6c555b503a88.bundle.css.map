{"version":3,"sources":["webpack:///./src/assets/styles/reset.css","webpack:///./src/assets/styles/fonts.css","webpack:///./src/assets/styles/main.css","webpack:///./.linaria-cache/src/components/icon/src/components/icon/icon.tsx","webpack:///./.linaria-cache/src/components/search-bar/src/components/search-bar/search-bar.tsx","webpack:///./.linaria-cache/src/components/card/src/components/card/stat-view.tsx","webpack:///./.linaria-cache/src/components/card/src/components/card/title.tsx","webpack:///./.linaria-cache/src/components/card/src/components/card/cost-view.tsx","webpack:///./.linaria-cache/src/components/card/src/components/card/overlay.tsx","webpack:///./.linaria-cache/src/components/card/src/components/card/image.tsx","webpack:///./.linaria-cache/src/components/card/src/components/card/faction-theme.tsx","webpack:///./.linaria-cache/src/components/card/src/components/card/faction-symbol.tsx","webpack:///./.linaria-cache/src/components/card/src/components/card/card.tsx","webpack:///./.linaria-cache/src/components/cards-grid/src/components/cards-grid/cards-grid.tsx","webpack:///./.linaria-cache/src/src/app.tsx"],"names":[".icon_ib4enca",".formContainer_fbqjp0a",".inputContainer_i12r6ate",".input_is1ql6",".iconContainer_ium5i5j",".statContainer_s1exkcwe",".reverseStat_r14kbjk2",".iconContainer_i4vq7sj",".textContainer_tsq366w",".title_t1i8d9wy",".costContainer_c1vdvh01",".styleGold_slf8d8p",".styleCrystal_sg8ykb",".styleStarsilver_st4j0sj",".styleShadowsteel_saj78py",".styleDragnsteel_s5hxrmq",".iconContainer_i1o3jfmy",".textContainer_t1jqq97g",".Overlay_o1h7q5pv",".Image_i7rsc75",".haven_hs46nda",".academy_aucyotm",".necropolis_nq4aaz5",".stronghold_s18l74zt",".sylvan_s1q46mij",".dungeon_d1y8bvc2",".fortress_f7ef4rx",".FactionSymbol_fe1zz21",".card_cnfpeqs",".upgraded_u1xn9elc",".container_cmvcmoj",".statsContainer_s1xl1qiq",".costContainer_c1mdjkme",".cardsGrid_c1xek7yj",".cardCell_c190rxu5",".appContainer_a106t6z1"],"mappings":"AAOA,KACE,qBACF,CAEA,iBAIE,2BAA4B,CAD5B,kBAEF,CAEA,eAEE,uBAAwB,CACxB,sBACF,CAEA,yGAuBE,QAAS,CACT,SACF,CAEA,kBACE,sBACF,CAEA,kBAME,aAAc,CACd,mBAAoB,CAEpB,eAAmB,CADnB,eAEF,CAEA,MAEE,kBACF,CAEA,MAEE,kBACF,CAEA,MAEE,mBACF,CAEA,GACE,eACF,CAEA,GACE,eACF,CAEA,GACE,eACF,CAEA,GACE,eACF,CAEA,GACE,eACF,CAEA,GACE,aACF,CAEA,GACE,eACF,CAEA,sCAME,YAAa,CADb,QAEF,CAEA,SACE,eACF,CAEA,kCAME,aACF,CAEA,4BAOE,iBAAkB,CADlB,WAAY,CADZ,cAGF,CAEA,gBACE,iBACF,CAEA,MACE,wBAAyB,CACzB,oBAAqB,CACrB,aACF,CAEA,MAEE,SACF,CAEA,EAGE,4BAA6B,CAF7B,UAAW,CACX,oBAEF,CAEA,SACE,UACF,CAEA,gBAEE,UAAW,CACX,yBACF,CAEA,iBAEE,eACF,CAEA,kBAIE,qBAAsB,CACtB,aACF,CAEA,MACE,aACF,CAEA,gCAEE,cACF,CAEA,iBACE,eACF,CAEA,gBACE,cACF,CAEA,8DAKE,yBAA0B,CAE1B,aAAc,CADd,cAEF,CAEA,6BAIE,4BAA6B,CAC7B,iBACF,CAEA,SACE,wBAAyB,CACzB,0BACF,CAEA,6DAKE,eACF,CAEA,SACE,oBAAqB,CACrB,uBACF,CC7OA,MACE,gCAAkC,CAClC,mCACF,CCHA,KACE,6CACF,CCEMA,mDCAAC,sNAMAC,6KAYAC,iHASAC,kJCrBAC,6QAUAC,mHAIAC,2IAWAC,2EC/BAC,2YCCAC,oTAaAC,wCAIAC,0CAIAC,8CAIAC,+CAIAC,8CAKAC,wFAQAC,iFCjCAC,4hCCZOC,qqBCCPC,yHAMAC,gIAMAC,yHAMAC,gIAMAC,6HAMAC,gIAMAC,8HCrCOC,kLCSPC,+UAiBAC,iGAIAC,wPAWAC,0MAWAC,qJCzCAC,yTAWAC,gQClBAC","file":"app.ecca3acf6c555b503a88.bundle.css","sourcesContent":["/*!\n  minireset        | v0.0.6 | MIT License | github.com/jgthms/minireset.css\n  modern-css-reset | v1.4.0 | MIT License | github.com/andy-piccalilli/modern-css-reset\n  ress             | v4.0.0 | MIT License | github.com/filipelinhares/ress\n  marx             | v3.0.6 | MIT License | github.com/mblode/marx\n*/\n\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: inherit;\n  background-repeat: no-repeat;\n}\n\n::before,\n::after {\n  text-decoration: inherit;\n  vertical-align: inherit;\n}\n\nhtml,\nbody,\np,\nhr,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nol,\nul,\nli,\ndl,\ndt,\ndd,\nblockquote,\nfigure,\nfieldset,\nlegend,\ntextarea,\niframe,\npre {\n  margin: 0;\n  padding: 0;\n}\n\nhtml:focus-within {\n  scroll-behavior: smooth;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  color: inherit;\n  font-family: inherit;\n  line-height: 1.2;\n  font-weight: normal;\n}\n\nh1,\nh2 {\n  margin: 1.3em 0 1em;\n}\n\nh3,\nh4 {\n  margin: 0.9em 0 0.5em;\n}\n\nh5,\nh6 {\n  margin: 0.5em 0 0.25em;\n}\n\nh1 {\n  font-size: 2.5em;\n}\n\nh2 {\n  font-size: 2.2em;\n}\n\nh3 {\n  font-size: 1.9em;\n}\n\nh4 {\n  font-size: 1.6em;\n}\n\nh5 {\n  font-size: 1.3em;\n}\n\nh6 {\n  font-size: 1em;\n}\n\nul {\n  list-style: none;\n}\n\ninput,\nbutton,\ntextarea,\nselect,\noptgroup {\n  margin: 0;\n  font: inherit;\n}\n\noptgroup {\n  font-weight: bold;\n}\n\nimg,\nsvg,\ncanvas,\niframe,\nvideo,\naudio {\n  display: block;\n}\n\nimg,\nsvg,\ncanvas,\niframe,\nvideo {\n  max-width: 100%;\n  height: auto;\n  border-style: none;\n}\n\nsvg:not([fill]) {\n  fill: currentColor;\n}\n\ntable {\n  border-collapse: collapse;\n  border-color: inherit;\n  text-indent: 0;\n}\n\ntd,\nth {\n  padding: 0;\n}\n\na {\n  color: #08f;\n  text-decoration: none;\n  background-color: transparent;\n}\n\na:active {\n  color: #048;\n}\n\na:hover,\na:focus {\n  color: #06c;\n  text-decoration: underline;\n}\n\na:active,\na:hover {\n  outline-width: 0;\n}\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace;\n  font-size: 1em;\n}\n\nsmall {\n  font-size: 80%;\n}\n\n[disabled],\n[aria-disabled='true'] {\n  cursor: default;\n}\n\n[aria-busy='true'] {\n  cursor: progress;\n}\n\n[aria-controls] {\n  cursor: pointer;\n}\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'],\n[role='button'] {\n  -webkit-appearance: button;\n  cursor: pointer;\n  color: inherit;\n}\n\nbutton,\ninput,\nselect,\ntextarea {\n  background-color: transparent;\n  border-style: none;\n}\n\nfieldset {\n  border: 1px solid #a0a0a0;\n  padding: 0.35em 0.75em 0.625em;\n}\n\na:focus,\nbutton:focus,\ninput:focus,\nselect:focus,\ntextarea:focus {\n  outline-width: 0;\n}\n\nprogress {\n  display: inline-block;\n  vertical-align: baseline;\n}\n",":root {\n  --ff-main: 'Metamorphous', cursive;\n  --ff-title: 'UnifrakturCook', cursive;\n}\n","body {\n  background: linear-gradient(-240deg, #840, #048);\n}\n","import React from 'react';\nimport { css } from '@linaria/core';\nimport iconSprite from '@assets/sprites/icons.svg';\n\nconst icon = css`\n  display: block;\n  width: 100%;\n  height: 100%;\n`;\n\ninterface Props {\n  src?: string;\n  prefix?: string;\n  name: string;\n  fill?: string;\n}\n\nexport const Icon: React.FC<Props> = ({\n  src = iconSprite,\n  prefix = 'icon-',\n  name,\n  fill,\n}) => {\n  return (\n    <svg className={icon} style={{ fill }}>\n      <use href={`${src}#${prefix}${name}`} />\n    </svg>\n  );\n};\n\nexport enum IconName {\n  TARGET_ARCHERY = 'target-archery',\n  TARGET_ARROWS = 'target-arrows',\n  SWORD_CLASH = 'sword-clash',\n  WALKING_BOOT = 'walking-boot',\n  WALKING_FOOT = 'walking-foot',\n  FOOTPRINT = 'footprint',\n  FLUFFY_WING = 'fluffy-wing',\n  CURLY_WING = 'curly-wing',\n  FLUFFY_SWIRL = 'fluffy-swirl',\n  FLUFFY_TREFOIL = 'fluffy-trefoil',\n  PORTAL = 'portal',\n  GLASS_HEART = 'glass-heart',\n  HEART_DROP = 'heart-drop',\n  LAYERED_ARMOR = 'layered-armor',\n  BORDERED_SHIELD = 'bordered-shield',\n  EAGLE_EMBLEM = 'eagle-emblem',\n  HOLY_GRAIL = 'holy-grail',\n  SANDS_OF_TIME = 'sands-of-time',\n  CLOVER = 'clover',\n  CASH = 'cash',\n  GEMS = 'gems',\n  SAPHIR = 'saphir',\n  METAL_BAR = 'metal-bar',\n  BLACK_BAR = 'black-bar',\n  ICE_CUBE = 'ice-cube',\n  MUSCLE_UP = 'muscle-up',\n  TRIPLE_YIN = 'triple-yin',\n  MOEBIUS_STAR = 'moebius-star',\n  UBISOFT_SUN = 'ubisoft-sun',\n  SUNRISE = 'sunrise',\n  SUN = 'sun',\n  MOON = 'moon',\n  NIGHT_SKY = 'night-sky',\n  SMALL_FIRE = 'small-fire',\n  BIG_WAVE = 'big-wave',\n  SPLURT = 'splurt',\n  DROPLETS = 'droplets',\n  LIGHT_THORNY_TRISKELION = 'light-thorny-triskelion',\n  EARTH_SPIT = 'earth-spit',\n  TORNADO = 'tornado',\n  TWISTER = 'twister',\n  SPECTRE = 'spectre',\n  MAGNIFYING_GLASS = 'magnifying-glass',\n}\n","import React from 'react';\nimport { css } from '@linaria/core';\nimport { Icon, IconName } from 'components/icon/icon';\n\nconst formContainer = css`\n  display: flex;\n  justify-content: center;\n  padding: 50px 20px;\n`;\n\nconst inputContainer = css`\n  --fg: #08f;\n  --bg: #048;\n  position: relative;\n  max-width: 600px;\n  width: 100%;\n  height: 40px;\n  background: var(--bg);\n  border-radius: 20px;\n  box-shadow: 0 0 0 3px var(--fg);\n`;\n\nconst input = css`\n  width: 100%;\n  height: 100%;\n  padding-left: 50px;\n  color: var(--fg);\n  font-family: var(--ff-main);\n  font-size: 25px;\n`;\n\nconst iconContainer = css`\n  --size: 50px;\n  position: absolute;\n  top: 2px;\n  left: -10px;\n  width: var(--size);\n  height: var(--size);\n\n  svg {\n    fill: #fff;\n  }\n`;\n\nexport function SearchBar() {\n  return (\n    <form>\n      <div className={formContainer}>\n        <div className={inputContainer}>\n          <div className={iconContainer}>\n            <Icon name={IconName.MAGNIFYING_GLASS} />\n          </div>\n          <input className={input} type=\"text\" />\n        </div>\n      </div>\n    </form>\n  );\n}\n","import { css, cx } from '@linaria/core';\nimport React from 'react';\nimport { Icon, IconName } from 'components/icon/icon';\nimport {\n  AttackType,\n  Creature,\n  DamageType,\n  MoveType,\n} from 'services/data/creature-scheme';\n\nconst statContainer = css`\n  height: 2.5em;\n  display: flex;\n  gap: 0.5em;\n  align-items: center;\n  background-color: #0004;\n  border-radius: 5em;\n  cursor: default;\n`;\n\nconst reverseStat = css`\n  flex-direction: row-reverse;\n`;\n\nconst iconContainer = css`\n  width: 2.5em;\n  height: 2.5em;\n  padding: 0.3em;\n  background-color: #0004;\n  border-radius: 50%;\n  svg {\n    fill: #fff;\n  }\n`;\n\nconst textContainer = css`\n  font-family: var(--ff-main);\n  font-size: 1em;\n  color: #fff;\n`;\n\nconst damageTypeIconMap: Map<DamageType, IconName> = new Map([\n  [DamageType.PHYSICAL, IconName.MUSCLE_UP],\n  [DamageType.LIGHT, IconName.SUN],\n  [DamageType.DARK, IconName.MOON],\n  [DamageType.PRIME, IconName.MOEBIUS_STAR],\n  [DamageType.AIR, IconName.TORNADO],\n  [DamageType.FIRE, IconName.SMALL_FIRE],\n  [DamageType.WATER, IconName.SPLURT],\n  [DamageType.EARTH, IconName.LIGHT_THORNY_TRISKELION],\n]);\n\nconst moveTypeIconMap: Map<MoveType, IconName> = new Map([\n  [MoveType.WALKING, IconName.FOOTPRINT],\n  [MoveType.FLYING, IconName.FLUFFY_WING],\n  [MoveType.TELEPORTATION, IconName.PORTAL],\n]);\n\ninterface StatProps {\n  name: string;\n  value: string;\n  description?: string;\n  reverse?: boolean;\n}\n\nexport const StatView: React.FC<StatProps> = ({\n  name,\n  value,\n  description,\n  reverse,\n}) => {\n  return (\n    <div\n      className={cx(statContainer, reverse && reverseStat)}\n      title={description}>\n      <div className={iconContainer}>\n        <Icon name={name} />\n      </div>\n      <div className={textContainer}>{value}</div>\n    </div>\n  );\n};\n\ntype Convert = (creature: Creature) => StatProps;\n\nexport class ConvertStats {\n  public static Attack: Convert = (creature) => ({\n    name:\n      creature.stats.attack.type === AttackType.MELEE\n        ? IconName.SWORD_CLASH\n        : IconName.TARGET_ARROWS,\n    value: creature.stats.attack.strength.toString(),\n    description: `${creature.stats.attack.type} attack`,\n  });\n\n  public static Defense: Convert = (creature) => ({\n    name: IconName.BORDERED_SHIELD,\n    value: creature.stats.defense.toString(),\n    description: 'Defense',\n  });\n\n  public static Health: Convert = (creature) => ({\n    name: IconName.GLASS_HEART,\n    value: creature.stats.health.toString(),\n    description: 'Health',\n  });\n\n  public static Damage: Convert = (creature) => ({\n    name:\n      damageTypeIconMap.get(creature.stats.damage.type) || IconName.MUSCLE_UP,\n    value: `${creature.stats.damage.min} ~ ${creature.stats.damage.max}`,\n    description: `${creature.stats.damage.type} damage`,\n  });\n\n  public static Initiative: Convert = (creature) => ({\n    name: IconName.SANDS_OF_TIME,\n    value: creature.stats.initiative.toString(),\n    description: 'Initiative',\n  });\n\n  public static Morale: Convert = (creature) => ({\n    name: IconName.EAGLE_EMBLEM,\n    value: creature.stats.morale.toString(),\n    description: 'Morale',\n  });\n\n  public static Destiny: Convert = (creature) => ({\n    name: IconName.CLOVER,\n    value: creature.stats.destiny.toString(),\n    description: 'Destiny',\n  });\n\n  public static Move: Convert = (creature) => ({\n    name: moveTypeIconMap.get(creature.stats.move.type) || IconName.FOOTPRINT,\n    value: creature.stats.move.speed.toString(),\n    description: `${creature.stats.move.type} speed`,\n  });\n}\n","import React from 'react';\nimport { css } from '@linaria/core';\nimport { CreatureProps } from 'services/data/creature-scheme';\n\nconst title = css`\n  --c1: hsla(var(--faction-c1), 0.75);\n  --c2: hsla(var(--faction-c1), 1);\n\n  width: 100%;\n  text-align: center;\n  font-family: var(--ff-title);\n  font-size: 3em;\n  background-color: hsla(var(--faction-c3), 0.5);\n\n  a {\n    text-decoration: none;\n    transition: color 200ms;\n    color: var(--c1);\n\n    &:hover {\n      color: var(--c2);\n    }\n\n    &:active {\n      color: var(--c2);\n    }\n  }\n`;\n\nexport const Title: React.FC<CreatureProps> = ({ creature }) => {\n  return (\n    <div className={title}>\n      {creature.wikiUrl ? (\n        <a\n          href={creature.wikiUrl}\n          title={`${creature.name}\\nFaction: ${creature.faction}\\nTier: ${creature.tier}`}\n          target=\"_blank\"\n          rel=\"noreferrer\">\n          {creature.name}\n        </a>\n      ) : (\n        <span title={creature.tier}>{creature.name}</span>\n      )}\n    </div>\n  );\n};\n","import { css, cx } from '@linaria/core';\nimport React from 'react';\nimport { Icon, IconName } from 'components/icon/icon';\nimport { Cost, Resource } from 'services/data/creature-scheme';\n\nconst costContainer = css`\n  --fg: #111;\n  --bg: #fff8;\n  height: 2.5em;\n  display: flex;\n  gap: 0.5em;\n  align-items: center;\n  padding: 0 1em;\n  border-radius: 2em;\n  background-color: var(--bg);\n  cursor: default;\n`;\n\nconst styleGold = css`\n  --fg: #fa0;\n  --bg: #4108;\n`;\nconst styleCrystal = css`\n  --fg: #88f;\n  --bg: #1148;\n`;\nconst styleStarsilver = css`\n  --fg: #adf;\n  --bg: #1238;\n`;\nconst styleShadowsteel = css`\n  --fg: #111;\n  --bg: #0004;\n`;\nconst styleDragnsteel = css`\n  --fg: #f84;\n  --bg: #3218;\n`;\n\nconst iconContainer = css`\n  width: 2em;\n  height: 2em;\n  svg {\n    fill: var(--fg);\n  }\n`;\n\nconst textContainer = css`\n  font-family: var(--ff-main);\n  font-size: 1em;\n  color: var(--fg);\n`;\n\nconst resourceStyleMap: Map<Resource, string> = new Map([\n  [Resource.GOLD, styleGold],\n  [Resource.CRYSTAL, styleCrystal],\n  [Resource.STARSILVER, styleStarsilver],\n  [Resource.SHADOWSTEEL, styleShadowsteel],\n  [Resource.DRAGONSTEEL, styleDragnsteel],\n]);\n\nconst resourceIconMap: Map<Resource, IconName> = new Map([\n  [Resource.GOLD, IconName.CASH],\n  [Resource.CRYSTAL, IconName.SAPHIR],\n  [Resource.STARSILVER, IconName.ICE_CUBE],\n  [Resource.SHADOWSTEEL, IconName.METAL_BAR],\n  [Resource.DRAGONSTEEL, IconName.BLACK_BAR],\n]);\n\ninterface CostProps {\n  cost: Cost;\n}\n\nexport const CostView: React.FC<CostProps> = ({ cost }) => {\n  const icon = (\n    <div className={iconContainer}>\n      <Icon name={resourceIconMap.get(cost.resource) || IconName.CASH} />\n    </div>\n  );\n\n  const text = <div className={textContainer}>{cost.amount}</div>;\n\n  return (\n    <div\n      className={cx(costContainer, resourceStyleMap.get(cost.resource))}\n      title={cost.resource}>\n      {icon}\n      {cost.resource !== Resource.GOLD ? cost.amount > 1 && icon : text}\n    </div>\n  );\n};\n","import { styled } from '@linaria/react';\nimport { CreatureProps, Tier } from 'services/data/creature-scheme';\nimport React from 'react';\n\nconst tierMap: Map<Tier, number> = new Map<Tier, number>([\n  [Tier.CORE, 30],\n  [Tier.ELITE, 10],\n  [Tier.CHAMPION, 3],\n]);\n\ninterface OverlayProps {\n  tier: number;\n}\n\nconst Overlay = styled.div<OverlayProps>`\n  @property --start-a {\n    syntax: '<angle>';\n    initial-value: 0deg;\n    inherits: false;\n  }\n\n  --start-a: 0deg;\n  --delta-a: ${({ tier }) => tier}deg;\n  --sector-1-a: calc(var(--start-a) + var(--delta-a));\n  --sector-2-a: calc(var(--start-a) + var(--delta-a) + var(--delta-a));\n\n  --c1: hsla(var(--faction-c1), 1);\n  --c2: hsla(var(--faction-c2), 1);\n  --c3: hsla(var(--faction-c3), 1);\n\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: repeating-conic-gradient(\n      var(--c1) var(--start-a) var(--sector-1-a),\n      var(--c2) var(--sector-1-a) var(--sector-2-a)\n    ),\n    linear-gradient(-60deg, var(--c2), var(--c3), var(--c2));\n  mask: radial-gradient(circle at center, #fff0 50%, #000);\n  box-shadow: inset 0 0 5px 10px var(--c1);\n  animation: 30s rotate linear infinite var(--animation-state);\n\n  @keyframes rotate {\n    0% {\n      --start-a: 0deg;\n    }\n    100% {\n      --start-a: 360deg;\n    }\n  }\n`;\n\nexport const OverlayTier: React.FC<CreatureProps> = ({ creature }) => {\n  return <Overlay tier={tierMap.get(creature.tier) || 60} />;\n};\n","import { styled } from '@linaria/react';\n\nexport const Image = styled.img`\n  @property --size {\n    syntax: '<length-percentage>';\n    initial-value: 100%;\n    inherits: false;\n  }\n\n  --size: 100%;\n\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  object-fit: cover;\n  width: var(--size);\n  height: var(--size);\n  clip-path: inset(0 round 15px);\n  animation: 1s resize linear infinite var(--animation-state) alternate;\n\n  @keyframes resize {\n    0% {\n      --size: 100%;\n    }\n    100% {\n      --size: 110%;\n    }\n  }\n`;\n","import { css } from '@linaria/core';\nimport { Faction } from 'services/data/creature-scheme';\n\nconst haven = css`\n  --faction-pos: 0 -90px;\n  --faction-c1: 202deg, 80%, 24%;\n  --faction-c2: 199deg, 66%, 69%;\n  --faction-c3: 168deg, 37%, 87%;\n`;\nconst academy = css`\n  --faction-pos: -360px -90px;\n  --faction-c1: 39deg, 100%, 27%;\n  --faction-c2: 53deg, 100%, 50%;\n  --faction-c3: 58deg, 100%, 50%;\n`;\nconst necropolis = css`\n  --faction-pos: -180px -90px;\n  --faction-c1: 0deg, 0%, 0%;\n  --faction-c2: 0deg, 0%, 10%;\n  --faction-c3: 0deg, 0%, 20%;\n`;\nconst stronghold = css`\n  --faction-pos: -90px -90px;\n  --faction-c1: 37deg, 95%, 15%;\n  --faction-c2: 42deg, 90%, 36%;\n  --faction-c3: 40deg, 94%, 47%;\n`;\nconst sylvan = css`\n  --faction-pos: -720px -90px;\n  --faction-c1: 96deg, 93%, 26%;\n  --faction-c2: 71deg, 71%, 55%;\n  --faction-c3: 58deg, 97%, 58%;\n`;\nconst dungeon = css`\n  --faction-pos: -630px -90px;\n  --faction-c1: 272deg, 40%, 9%;\n  --faction-c2: 275deg, 41%, 29%;\n  --faction-c3: 275deg, 41%, 36%;\n`;\nconst fortress = css`\n  --faction-pos: -450px -90px;\n  --faction-c1: 0deg, 100%, 15%;\n  --faction-c2: 0deg, 100%, 33%;\n  --faction-c3: 0deg, 100%, 38%;\n`;\n\nexport const factionThemeMap: Map<Faction, string> = new Map([\n  [Faction.HAVEN, haven],\n  [Faction.ACADEMY, academy],\n  [Faction.NECROPOLIS, necropolis],\n  [Faction.STRONGHOLD, stronghold],\n  [Faction.SYLVAN, sylvan],\n  [Faction.DUNGEON, dungeon],\n  [Faction.FORTRESS, fortress],\n]);\n","import { styled } from '@linaria/react';\n\nexport const FactionSymbol = styled.div`\n  --size: 90px;\n  position: absolute;\n  top: -5px;\n  right: -10px;\n  width: var(--size);\n  height: var(--size);\n  background: var(--factions-sprite-url) no-repeat var(--faction-pos);\n`;\n","import React from 'react';\nimport { css, cx } from '@linaria/core';\nimport { CreatureProps } from 'services/data/creature-scheme';\nimport { ConvertStats, StatView } from './stat-view';\nimport { Title } from './title';\nimport { CostView } from './cost-view';\nimport { OverlayTier } from './overlay';\nimport { Image } from './image';\nimport { factionThemeMap } from './faction-theme';\nimport { FactionSymbol } from './faction-symbol';\n\nconst card = css`\n  font-size: 1em;\n  position: relative;\n  width: 100%;\n  aspect-ratio: 5 / 4;\n  border-radius: 15px;\n  overflow: hidden;\n  box-shadow: 0 0 0.3em 0.3em #0004;\n  transition: all 200ms;\n  filter: contrast(1.1) grayscale(0.5);\n\n  --animation-state: paused;\n  &:hover {\n    --animation-state: running;\n  }\n`;\n\nconst upgraded = css`\n  filter: contrast(1.1) saturate(1.1);\n`;\n\nconst container = css`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column-reverse;\n  row-gap: 1em;\n`;\n\nconst titleContainer = css``;\n\nconst statsContainer = css`\n  width: 100%;\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: repeat(4, 2.5em);\n  row-gap: 0.5em;\n  column-gap: 40%;\n  padding: 0 0.5em;\n`;\n\nconst costContainer = css`\n  width: 100%;\n  margin-bottom: auto;\n  display: flex;\n  gap: 1em;\n  padding: 0.5em;\n`;\n\nexport const Card: React.FC<CreatureProps> = ({ creature }) => {\n  return (\n    <div\n      className={cx(\n        card,\n        factionThemeMap.get(creature.faction),\n        creature.upgraded && upgraded\n      )}>\n      <Image src={creature.imageUrl} alt={creature.name} />\n      <OverlayTier creature={creature} />\n      <div className={container}>\n        <div className={titleContainer}>\n          <Title creature={creature} />\n        </div>\n        <div className={statsContainer}>\n          <StatView {...ConvertStats.Attack(creature)} />\n          <StatView {...ConvertStats.Defense(creature)} />\n          <StatView {...ConvertStats.Health(creature)} />\n          <StatView {...ConvertStats.Damage(creature)} />\n          <StatView {...ConvertStats.Initiative(creature)} reverse />\n          <StatView {...ConvertStats.Move(creature)} reverse />\n          <StatView {...ConvertStats.Morale(creature)} reverse />\n          <StatView {...ConvertStats.Destiny(creature)} reverse />\n        </div>\n        <div className={costContainer}>\n          {creature.cost.map((cost) => (\n            <CostView key={cost.resource} cost={cost} />\n          ))}\n        </div>\n      </div>\n      <FactionSymbol title={creature.faction} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { css } from '@linaria/core';\nimport useResizeObserver from 'use-resize-observer';\nimport { Card } from 'components/card/card';\nimport { Creature } from 'services/data/creature-scheme';\nimport factionsSprite from '@assets/sprites/factions.png';\n\ninterface CSSCardsGrid extends React.CSSProperties {\n  '--factions-sprite-url': string;\n  '--cell-size-w'?: number;\n  '--cell-size-h'?: number;\n}\n\nconst cardsGrid = css`\n  --perspective: calc(var(--cell-size-w) * 3px);\n  font-size: calc(var(--cell-size-w) / 30 * 1px);\n  width: 100%;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  grid-gap: 20px;\n  justify-content: center;\n  padding: 20px;\n`;\n\nconst cardCell = css`\n  transform-style: preserve-3d;\n  perspective: var(--perspective);\n`;\n\ninterface CardsGridProps {\n  creatures: Creature[];\n}\n\nexport const CardsGrid: React.FC<CardsGridProps> = ({ creatures }) => {\n  const { ref, width, height } = useResizeObserver();\n  const style: CSSCardsGrid = {\n    '--factions-sprite-url': `url(${factionsSprite})`,\n    '--cell-size-w': width,\n    '--cell-size-h': height,\n  };\n  return (\n    <div className={cardsGrid} style={style}>\n      {creatures.map((creature, index) => (\n        <div\n          key={creature.name}\n          className={cardCell}\n          ref={index === 0 ? ref : undefined}>\n          <Card creature={creature} />\n        </div>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { css } from '@linaria/core';\nimport { SearchBar } from 'components/search-bar/search-bar';\nimport { CardsGrid } from 'components/cards-grid/cards-grid';\nimport { getCreatures } from 'services/data/creature-sample';\n\nconst appContainer = css`\n  max-width: 1400px;\n  width: 100%;\n  margin: 0 auto;\n  background: #0008;\n`;\n\nexport const App: React.FC = () => {\n  return (\n    <div className={appContainer}>\n      <SearchBar />\n      <CardsGrid creatures={getCreatures()} />\n    </div>\n  );\n};\n"],"sourceRoot":""}