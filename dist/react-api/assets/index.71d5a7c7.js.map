{"version":3,"file":"index.71d5a7c7.js","sources":["D:/dev/rs-school/React-RSSchool-2021q3/src/services/anilist-api/use-anilist-api.ts","D:/dev/rs-school/React-RSSchool-2021q3/src/services/anilist-api/queries/search-query.graphql","D:/dev/rs-school/React-RSSchool-2021q3/src/components/paginator/results.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/paginator/utils.ts","D:/dev/rs-school/React-RSSchool-2021q3/src/components/paginator/button.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/paginator/input-page.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/paginator/selector.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/paginator/paginator.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/error-info/client-error-info.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/error-info/error-info.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/card/genres.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/services/anilist-api/generated/types.ts","D:/dev/rs-school/React-RSSchool-2021q3/src/components/card/format.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/svg/svg.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/assets/sprites/icons.svg","D:/dev/rs-school/React-RSSchool-2021q3/src/assets/sprites/flags.svg","D:/dev/rs-school/React-RSSchool-2021q3/src/shared/country-code.ts","D:/dev/rs-school/React-RSSchool-2021q3/src/shared/maybe.ts","D:/dev/rs-school/React-RSSchool-2021q3/src/components/card/cover.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/card/info.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/card/title.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/card/card.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/cards/cards.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/search-bar/search-bar.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/order-by/order-state.ts","D:/dev/rs-school/React-RSSchool-2021q3/src/components/order-by/orders-config.ts","D:/dev/rs-school/React-RSSchool-2021q3/src/components/order-by/order-by.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/order-by/order-by-group.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/loader/full-loader.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/components/app/app.tsx","D:/dev/rs-school/React-RSSchool-2021q3/src/main.tsx"],"sourcesContent":["import { RequestDocument } from 'graphql-request/dist/types';\nimport { useEffect, useState } from 'react';\nimport { GraphQLClient } from 'graphql-request';\n\nconst API_ENDPOINT = 'https://graphql.anilist.co';\n\nconst isAbortError = (error: unknown) =>\n  error instanceof DOMException && error.message === 'Aborted';\n\nexport interface UseAnilistApi<T> {\n  isLoading: boolean;\n  isError: boolean;\n  error?: unknown;\n  data?: T | null;\n}\n\nexport function useAnilistApi<TResult, TVars>(\n  query: RequestDocument,\n  variables: TVars\n): UseAnilistApi<TResult> {\n  const [isLoading, setLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [error, setError] = useState<unknown>(null);\n  const [data, setData] = useState<TResult | null>(null);\n\n  const abortController = new AbortController();\n\n  let fetchData = async () => {\n    setLoading(true);\n    setIsError(false);\n    setError(null);\n    try {\n      const result = await new GraphQLClient(API_ENDPOINT, {\n        signal: abortController.signal,\n      }).request<TResult, TVars>(query, variables);\n      setData(result);\n    } catch (error) {\n      console.log(error);\n      if (!isAbortError(error)) {\n        setIsError(true);\n        setError(error);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchData().then(null, null);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [variables]);\n\n  return { isLoading, isError, error, data };\n}\n","query Search($page: Int = 1, $perPage: Int = 5, $type: MediaType, $search: String, $sort: [MediaSort]) {\n  Page(page: $page, perPage: $perPage) {\n    pageInfo {\n      ...pageInfo\n    }\n    media(type: $type, search: $search, sort: $sort) {\n      ...media\n    }\n  }\n}\n\nfragment pageInfo on PageInfo {\n  total\n  currentPage\n  lastPage\n  perPage\n  hasNextPage\n}\n\nfragment media on Media {\n  id\n  title {\n    ...title\n  }\n  format\n  status(version: 2)\n  countryOfOrigin\n  popularity\n  averageScore\n  meanScore\n  startDate {\n    ...date\n  }\n  endDate {\n    ...date\n  }\n  isAdult\n  genres\n  duration\n  episodes\n  chapters\n  coverImage {\n    ...coverImage\n  }\n  studios {\n    nodes {\n      id\n      name\n    }\n  }\n}\n\nfragment title on MediaTitle {\n  english\n  romaji\n  native\n}\n\nfragment coverImage on MediaCoverImage {\n  large\n  color\n}\n\n\nfragment date on FuzzyDate {\n  year\n}\n","import React from 'react';\nimport classes from './results.module.pcss';\nimport { PageInfoProps } from './types';\n\nconst MAX_RESULTS = 50;\nconst MIN_RESULTS = 5;\nconst STEP = 5;\n\ninterface ResultsProps extends PageInfoProps {\n  onSelect: (perPage: number) => void;\n}\n\nexport const Results: React.FC<ResultsProps> = ({ pageInfo, onSelect }) => {\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    onSelect(Number(event.currentTarget.value));\n  };\n\n  return (\n    <div className={classes.results}>\n      <div>Results ({pageInfo.total}), per page:</div>\n      <select\n        className={classes.selectPerPage}\n        name=\"per-page\"\n        value={pageInfo.perPage || 10}\n        onChange={handleSelect}>\n        {Array(MAX_RESULTS / STEP)\n          .fill(MIN_RESULTS)\n          .map((a, i) => a + i * STEP)\n          .map((item) => (\n            <option key={item} value={item}>\n              {item}\n            </option>\n          ))}\n      </select>\n    </div>\n  );\n};\n","import { Maybe } from 'shared/maybe';\n\nexport function head<T>(array: T[]): Maybe<T> {\n  return array.length === 0 ? undefined : array[0];\n}\n\nexport function tail<T>(array: T[]): Maybe<T> {\n  return array.length === 0 ? undefined : array[array.length - 1];\n}\n\nexport const getRange = (\n  current: number,\n  last: number,\n  length: number\n): number[] => {\n  let maxStart = last - length + 1;\n  maxStart = maxStart < 1 ? 1 : maxStart;\n\n  let minEnd = length - 1;\n  minEnd = minEnd > last ? last : minEnd;\n\n  const half = Math.floor(length / 2);\n\n  let start = current - half;\n  start = start < 1 ? 1 : start;\n  start = start > maxStart ? maxStart : start;\n\n  let end = start + length - 1;\n  end = end > last ? last : end;\n  end = end < minEnd ? minEnd : end;\n\n  // console.log(current, last, length, ' => ', maxStart, minEnd, start, end);\n\n  return Array(end + 1 - start)\n    .fill(start)\n    .map((num, index) => num + index);\n};\n\n// console.log(getRange(1, 13, 5));\n// console.log(getRange(3, 13, 5));\n// console.log(getRange(5, 13, 5));\n// console.log(getRange(7, 13, 5));\n// console.log(getRange(9, 13, 5));\n// console.log(getRange(11, 13, 5));\n// console.log(getRange(13, 13, 5));\n","import React from 'react';\nimport classes from './button.module.pcss';\n\nexport const Button: React.FC<{\n  page: number;\n  disabled?: boolean;\n  onClick: (page: number) => void;\n}> = ({ page, disabled, onClick }) => {\n  return (\n    <button\n      type=\"button\"\n      className={classes.button}\n      disabled={disabled}\n      onClick={() => onClick(page)}>\n      {page}\n    </button>\n  );\n};\n","import React, { useState } from 'react';\nimport classes from './input-page.module.pcss';\n\nexport const InputPage: React.FC<{\n  page: number;\n  last: number;\n  onChange: (page: number) => void;\n}> = ({ page, last, onChange }) => {\n  const [value, setValue] = useState(page);\n\n  const handleInput = (event: React.FormEvent<HTMLInputElement>) => {\n    let nextPage = +event.currentTarget.value;\n    nextPage = nextPage > last ? last : nextPage;\n    nextPage = nextPage < 1 ? 1 : nextPage;\n    setValue(Math.ceil(nextPage));\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onChange(value);\n  };\n\n  return (\n    <form className={classes.form} onSubmit={handleSubmit}>\n      <div className={classes.form}>\n        <input\n          className={classes.input}\n          type=\"number\"\n          value={value}\n          min={1}\n          max={last}\n          step={1}\n          required\n          onInput={handleInput}\n        />\n        <button\n          type=\"submit\"\n          className={classes.submit}\n          disabled={value === page}>\n          {value !== page && 'go'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { PageInfoProps } from './types';\nimport classes from './selector.module.pcss';\nimport { getRange, head, tail } from './utils';\nimport { Button } from './button';\nimport { InputPage } from './input-page';\n\nconst RANGE_LENGTH = 5;\n\ninterface SelectorProps extends PageInfoProps {\n  onSelect: (page: number) => void;\n}\n\nexport const Selector: React.FC<SelectorProps> = ({ pageInfo, onSelect }) => {\n  const current = pageInfo.currentPage || 1;\n  const last = pageInfo.lastPage || 1;\n\n  const range = getRange(current, last, RANGE_LENGTH);\n  const firstInRange = head(range) === 1;\n  const lastInRange = tail(range) === last;\n\n  const handlePageSelect = (page: number) => {\n    onSelect(page);\n  };\n\n  return (\n    <ul className={classes.selector}>\n      {!firstInRange && (\n        <li className={`${classes.edge} ${classes.first}`}>\n          <Button page={1} onClick={handlePageSelect} />\n        </li>\n      )}\n      {range.map((num) => {\n        return (\n          <li key={num}>\n            {num === current ? (\n              <InputPage page={num} last={last} onChange={handlePageSelect} />\n            ) : (\n              <Button page={num} onClick={handlePageSelect} />\n            )}\n          </li>\n        );\n      })}\n      {!lastInRange && (\n        <li className={`${classes.edge} ${classes.last}`}>\n          <Button page={last} onClick={handlePageSelect} />\n        </li>\n      )}\n    </ul>\n  );\n};\n","import React from 'react';\nimport classes from './paginator.module.pcss';\nimport { Results } from './results';\nimport { Selector } from './selector';\nimport { PageInfoProps } from './types';\n\ninterface PaginatorProps extends PageInfoProps {\n  onPageSelect: (page: number) => void;\n  onPerPageSelect: (page: number) => void;\n}\n\nexport const Paginator: React.FC<PaginatorProps> = ({\n  pageInfo,\n  onPageSelect,\n  onPerPageSelect,\n}) => {\n  if (!pageInfo.total || pageInfo.total === 0) return <></>;\n\n  const handlePageSelect = (page: number) => {\n    onPageSelect(page);\n  };\n\n  const handlePerPageSelect = (page: number) => {\n    onPerPageSelect(page);\n  };\n\n  return (\n    <div className={classes.paginator}>\n      <Selector pageInfo={pageInfo} onSelect={handlePageSelect} />\n      <Results pageInfo={pageInfo} onSelect={handlePerPageSelect} />\n    </div>\n  );\n};\n","import { ClientError } from 'graphql-request/dist/types';\nimport React from 'react';\n\ninterface ClientErrorInfoProps {\n  error: ClientError;\n}\n\nexport const ClientErrorInfo: React.FC<ClientErrorInfoProps> = ({ error }) => {\n  return (\n    <div>\n      <pre>\n        <code>{JSON.stringify(error, null, 2)}</code>\n      </pre>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ClientError } from 'graphql-request/dist/types';\nimport { ClientErrorInfo } from './client-error-info';\n\ninterface ErrorInfoProps {\n  error: unknown;\n}\n\nexport const ErrorInfo: React.FC<ErrorInfoProps> = ({ error }) => {\n  if (!error) {\n    return <div>Unknown error</div>;\n  }\n  if (error instanceof ClientError) {\n    return <ClientErrorInfo error={error} />;\n  }\n  if (error instanceof Error) {\n    return <div>{error.message}</div>;\n  }\n  if (typeof error === 'string') {\n    return <div>{error}</div>;\n  }\n  return (\n    <div>\n      <pre>\n        <code>{JSON.stringify(error, null, 2)}</code>\n      </pre>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Maybe } from '../../shared/maybe';\nimport classes from './genres.module.pcss';\n\nexport const Genres: React.FC<{ genres: Maybe<string>[] }> = ({ genres }) => {\n  return (\n    <ul className={classes.genres__list}>\n      {genres.map((genre) => (\n        <li key={genre}>\n          <div className={classes.genres__item}>{genre}</div>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","export type Maybe<T> = T | null | undefined;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport interface Scalars {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** ISO 3166-1 alpha-2 country code */\n  CountryCode: any;\n  /** 8 digit long date integer (YYYYMMDD). Unknown dates represented by 0. E.g. 2016: 20160000, May 1976: 19760500 */\n  FuzzyDateInt: any;\n  Json: any;\n}\n\n/** Activity sort enums */\nexport enum ActivitySort {\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n}\n\n/** Activity type enum. */\nexport enum ActivityType {\n  /** A anime list update activity */\n  AnimeList = 'ANIME_LIST',\n  /** A manga list update activity */\n  MangaList = 'MANGA_LIST',\n  /** Anime & Manga list update, only used in query arguments */\n  MediaList = 'MEDIA_LIST',\n  /** A text message activity sent to another user */\n  Message = 'MESSAGE',\n  /** A text activity */\n  Text = 'TEXT',\n}\n\nexport interface AiringScheduleInput {\n  airingAt?: Maybe<Scalars['Int']>;\n  episode?: Maybe<Scalars['Int']>;\n  timeUntilAiring?: Maybe<Scalars['Int']>;\n}\n\n/** Airing schedule sort enums */\nexport enum AiringSort {\n  Episode = 'EPISODE',\n  EpisodeDesc = 'EPISODE_DESC',\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  MediaId = 'MEDIA_ID',\n  MediaIdDesc = 'MEDIA_ID_DESC',\n  Time = 'TIME',\n  TimeDesc = 'TIME_DESC',\n}\n\nexport interface AniChartHighlightInput {\n  highlight?: Maybe<Scalars['String']>;\n  mediaId?: Maybe<Scalars['Int']>;\n}\n\n/** The names of the character */\nexport interface CharacterNameInput {\n  /** Other names the character might be referred by */\n  alternative?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** Other names the character might be referred to as but are spoilers */\n  alternativeSpoiler?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The character's given name */\n  first?: Maybe<Scalars['String']>;\n  /** The character's surname */\n  last?: Maybe<Scalars['String']>;\n  /** The character's middle name */\n  middle?: Maybe<Scalars['String']>;\n  /** The character's full name in their native language */\n  native?: Maybe<Scalars['String']>;\n}\n\n/** The role the character plays in the media */\nexport enum CharacterRole {\n  /** A background character in the media */\n  Background = 'BACKGROUND',\n  /** A primary character role in the media */\n  Main = 'MAIN',\n  /** A supporting character role in the media */\n  Supporting = 'SUPPORTING',\n}\n\n/** Character sort enums */\nexport enum CharacterSort {\n  Favourites = 'FAVOURITES',\n  FavouritesDesc = 'FAVOURITES_DESC',\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  /** Order manually decided by moderators */\n  Relevance = 'RELEVANCE',\n  Role = 'ROLE',\n  RoleDesc = 'ROLE_DESC',\n  SearchMatch = 'SEARCH_MATCH',\n}\n\n/** Date object that allows for incomplete date values (fuzzy) */\nexport interface FuzzyDateInput {\n  /** Numeric Day (24) */\n  day?: Maybe<Scalars['Int']>;\n  /** Numeric Month (3) */\n  month?: Maybe<Scalars['Int']>;\n  /** Numeric Year (2017) */\n  year?: Maybe<Scalars['Int']>;\n}\n\n/** Types that can be liked */\nexport enum LikeableType {\n  Activity = 'ACTIVITY',\n  ActivityReply = 'ACTIVITY_REPLY',\n  Thread = 'THREAD',\n  ThreadComment = 'THREAD_COMMENT',\n}\n\n/** An external link to another site related to the media */\nexport interface MediaExternalLinkInput {\n  /** The id of the external link */\n  id: Scalars['Int'];\n  /** The site location of the external link */\n  site: Scalars['String'];\n  /** The url of the external link */\n  url: Scalars['String'];\n}\n\n/** The format the media was released in */\nexport enum MediaFormat {\n  /** Professionally published manga with more than one chapter */\n  Manga = 'MANGA',\n  /** Anime movies with a theatrical release */\n  Movie = 'MOVIE',\n  /** Short anime released as a music video */\n  Music = 'MUSIC',\n  /** Written books released as a series of light novels */\n  Novel = 'NOVEL',\n  /** (Original Net Animation) Anime that have been originally released online or are only available through streaming services. */\n  Ona = 'ONA',\n  /** Manga with just one chapter */\n  OneShot = 'ONE_SHOT',\n  /** (Original Video Animation) Anime that have been released directly on DVD/Blu-ray without originally going through a theatrical release or television broadcast */\n  Ova = 'OVA',\n  /** Special episodes that have been included in DVD/Blu-ray releases, picture dramas, pilots, etc */\n  Special = 'SPECIAL',\n  /** Anime broadcast on television */\n  Tv = 'TV',\n  /** Anime which are under 15 minutes in length and broadcast on television */\n  TvShort = 'TV_SHORT',\n}\n\n/** A user's list options for anime or manga lists */\nexport interface MediaListOptionsInput {\n  /** The names of the user's advanced scoring sections */\n  advancedScoring?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** If advanced scoring is enabled */\n  advancedScoringEnabled?: Maybe<Scalars['Boolean']>;\n  /** The names of the user's custom lists */\n  customLists?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The order each list should be displayed in */\n  sectionOrder?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** If the completed sections of the list should be separated by format */\n  splitCompletedSectionByFormat?: Maybe<Scalars['Boolean']>;\n  /** list theme */\n  theme?: Maybe<Scalars['String']>;\n}\n\n/** Media list sort enums */\nexport enum MediaListSort {\n  AddedTime = 'ADDED_TIME',\n  AddedTimeDesc = 'ADDED_TIME_DESC',\n  FinishedOn = 'FINISHED_ON',\n  FinishedOnDesc = 'FINISHED_ON_DESC',\n  MediaId = 'MEDIA_ID',\n  MediaIdDesc = 'MEDIA_ID_DESC',\n  MediaPopularity = 'MEDIA_POPULARITY',\n  MediaPopularityDesc = 'MEDIA_POPULARITY_DESC',\n  MediaTitleEnglish = 'MEDIA_TITLE_ENGLISH',\n  MediaTitleEnglishDesc = 'MEDIA_TITLE_ENGLISH_DESC',\n  MediaTitleNative = 'MEDIA_TITLE_NATIVE',\n  MediaTitleNativeDesc = 'MEDIA_TITLE_NATIVE_DESC',\n  MediaTitleRomaji = 'MEDIA_TITLE_ROMAJI',\n  MediaTitleRomajiDesc = 'MEDIA_TITLE_ROMAJI_DESC',\n  Priority = 'PRIORITY',\n  PriorityDesc = 'PRIORITY_DESC',\n  Progress = 'PROGRESS',\n  ProgressDesc = 'PROGRESS_DESC',\n  ProgressVolumes = 'PROGRESS_VOLUMES',\n  ProgressVolumesDesc = 'PROGRESS_VOLUMES_DESC',\n  Repeat = 'REPEAT',\n  RepeatDesc = 'REPEAT_DESC',\n  Score = 'SCORE',\n  ScoreDesc = 'SCORE_DESC',\n  StartedOn = 'STARTED_ON',\n  StartedOnDesc = 'STARTED_ON_DESC',\n  Status = 'STATUS',\n  StatusDesc = 'STATUS_DESC',\n  UpdatedTime = 'UPDATED_TIME',\n  UpdatedTimeDesc = 'UPDATED_TIME_DESC',\n}\n\n/** Media list watching/reading status enum. */\nexport enum MediaListStatus {\n  /** Finished watching/reading */\n  Completed = 'COMPLETED',\n  /** Currently watching/reading */\n  Current = 'CURRENT',\n  /** Stopped watching/reading before completing */\n  Dropped = 'DROPPED',\n  /** Paused watching/reading */\n  Paused = 'PAUSED',\n  /** Planning to watch/read */\n  Planning = 'PLANNING',\n  /** Re-watching/reading */\n  Repeating = 'REPEATING',\n}\n\n/** The type of ranking */\nexport enum MediaRankType {\n  /** Ranking is based on the media's popularity */\n  Popular = 'POPULAR',\n  /** Ranking is based on the media's ratings/score */\n  Rated = 'RATED',\n}\n\n/** Type of relation media has to its parent. */\nexport enum MediaRelation {\n  /** An adaption of this media into a different format */\n  Adaptation = 'ADAPTATION',\n  /** An alternative version of the same media */\n  Alternative = 'ALTERNATIVE',\n  /** Shares at least 1 character */\n  Character = 'CHARACTER',\n  /** Version 2 only. */\n  Compilation = 'COMPILATION',\n  /** Version 2 only. */\n  Contains = 'CONTAINS',\n  /** Other */\n  Other = 'OTHER',\n  /** The media a side story is from */\n  Parent = 'PARENT',\n  /** Released before the relation */\n  Prequel = 'PREQUEL',\n  /** Released after the relation */\n  Sequel = 'SEQUEL',\n  /** A side story of the parent media */\n  SideStory = 'SIDE_STORY',\n  /** Version 2 only. The source material the media was adapted from */\n  Source = 'SOURCE',\n  /** An alternative version of the media with a different primary focus */\n  SpinOff = 'SPIN_OFF',\n  /** A shortened and summarized version */\n  Summary = 'SUMMARY',\n}\n\nexport enum MediaSeason {\n  /** Months September to November */\n  Fall = 'FALL',\n  /** Months March to May */\n  Spring = 'SPRING',\n  /** Months June to August */\n  Summer = 'SUMMER',\n  /** Months December to February */\n  Winter = 'WINTER',\n}\n\n/** Media sort enums */\nexport enum MediaSort {\n  Chapters = 'CHAPTERS',\n  ChaptersDesc = 'CHAPTERS_DESC',\n  Duration = 'DURATION',\n  DurationDesc = 'DURATION_DESC',\n  EndDate = 'END_DATE',\n  EndDateDesc = 'END_DATE_DESC',\n  Episodes = 'EPISODES',\n  EpisodesDesc = 'EPISODES_DESC',\n  Favourites = 'FAVOURITES',\n  FavouritesDesc = 'FAVOURITES_DESC',\n  Format = 'FORMAT',\n  FormatDesc = 'FORMAT_DESC',\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  Popularity = 'POPULARITY',\n  PopularityDesc = 'POPULARITY_DESC',\n  Score = 'SCORE',\n  ScoreDesc = 'SCORE_DESC',\n  SearchMatch = 'SEARCH_MATCH',\n  StartDate = 'START_DATE',\n  StartDateDesc = 'START_DATE_DESC',\n  Status = 'STATUS',\n  StatusDesc = 'STATUS_DESC',\n  TitleEnglish = 'TITLE_ENGLISH',\n  TitleEnglishDesc = 'TITLE_ENGLISH_DESC',\n  TitleNative = 'TITLE_NATIVE',\n  TitleNativeDesc = 'TITLE_NATIVE_DESC',\n  TitleRomaji = 'TITLE_ROMAJI',\n  TitleRomajiDesc = 'TITLE_ROMAJI_DESC',\n  Trending = 'TRENDING',\n  TrendingDesc = 'TRENDING_DESC',\n  Type = 'TYPE',\n  TypeDesc = 'TYPE_DESC',\n  UpdatedAt = 'UPDATED_AT',\n  UpdatedAtDesc = 'UPDATED_AT_DESC',\n  Volumes = 'VOLUMES',\n  VolumesDesc = 'VOLUMES_DESC',\n}\n\n/** Source type the media was adapted from */\nexport enum MediaSource {\n  /** Version 2 only. Japanese Anime */\n  Anime = 'ANIME',\n  /** Version 2 only. Self-published works */\n  Doujinshi = 'DOUJINSHI',\n  /** Written work published in volumes */\n  LightNovel = 'LIGHT_NOVEL',\n  /** Asian comic book */\n  Manga = 'MANGA',\n  /** Version 2 only. Written works not published in volumes */\n  Novel = 'NOVEL',\n  /** An original production not based of another work */\n  Original = 'ORIGINAL',\n  /** Other */\n  Other = 'OTHER',\n  /** Video game */\n  VideoGame = 'VIDEO_GAME',\n  /** Video game driven primary by text and narrative */\n  VisualNovel = 'VISUAL_NOVEL',\n}\n\n/** The current releasing status of the media */\nexport enum MediaStatus {\n  /** Ended before the work could be finished */\n  Cancelled = 'CANCELLED',\n  /** Has completed and is no longer being released */\n  Finished = 'FINISHED',\n  /** Version 2 only. Is currently paused from releasing and will resume at a later date */\n  Hiatus = 'HIATUS',\n  /** To be released at a later date */\n  NotYetReleased = 'NOT_YET_RELEASED',\n  /** Currently releasing */\n  Releasing = 'RELEASING',\n}\n\n/** The official titles of the media in various languages */\nexport interface MediaTitleInput {\n  /** The official english title */\n  english?: Maybe<Scalars['String']>;\n  /** Official title in it's native language */\n  native?: Maybe<Scalars['String']>;\n  /** The romanization of the native language title */\n  romaji?: Maybe<Scalars['String']>;\n}\n\n/** Media trend sort enums */\nexport enum MediaTrendSort {\n  Date = 'DATE',\n  DateDesc = 'DATE_DESC',\n  Episode = 'EPISODE',\n  EpisodeDesc = 'EPISODE_DESC',\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  MediaId = 'MEDIA_ID',\n  MediaIdDesc = 'MEDIA_ID_DESC',\n  Popularity = 'POPULARITY',\n  PopularityDesc = 'POPULARITY_DESC',\n  Score = 'SCORE',\n  ScoreDesc = 'SCORE_DESC',\n  Trending = 'TRENDING',\n  TrendingDesc = 'TRENDING_DESC',\n}\n\n/** Media type enum, anime or manga. */\nexport enum MediaType {\n  /** Japanese Anime */\n  Anime = 'ANIME',\n  /** Asian comic */\n  Manga = 'MANGA',\n}\n\nexport enum ModActionType {\n  Anon = 'ANON',\n  Ban = 'BAN',\n  Delete = 'DELETE',\n  Edit = 'EDIT',\n  Expire = 'EXPIRE',\n  Note = 'NOTE',\n  Report = 'REPORT',\n  Reset = 'RESET',\n}\n\n/** Mod role enums */\nexport enum ModRole {\n  /** An AniList administrator */\n  Admin = 'ADMIN',\n  /** An anime data moderator */\n  AnimeData = 'ANIME_DATA',\n  /** A community moderator */\n  Community = 'COMMUNITY',\n  /** An AniList developer */\n  Developer = 'DEVELOPER',\n  /** A discord community moderator */\n  DiscordCommunity = 'DISCORD_COMMUNITY',\n  /** A lead anime data moderator */\n  LeadAnimeData = 'LEAD_ANIME_DATA',\n  /** A lead community moderator */\n  LeadCommunity = 'LEAD_COMMUNITY',\n  /** A head developer of AniList */\n  LeadDeveloper = 'LEAD_DEVELOPER',\n  /** A lead manga data moderator */\n  LeadMangaData = 'LEAD_MANGA_DATA',\n  /** A lead social media moderator */\n  LeadSocialMedia = 'LEAD_SOCIAL_MEDIA',\n  /** A manga data moderator */\n  MangaData = 'MANGA_DATA',\n  /** A retired moderator */\n  Retired = 'RETIRED',\n  /** A social media moderator */\n  SocialMedia = 'SOCIAL_MEDIA',\n}\n\n/** Notification option input */\nexport interface NotificationOptionInput {\n  /** Whether this type of notification is enabled */\n  enabled?: Maybe<Scalars['Boolean']>;\n  /** The type of notification */\n  type?: Maybe<NotificationType>;\n}\n\n/** Notification type enum */\nexport enum NotificationType {\n  /** A user has liked your activity */\n  ActivityLike = 'ACTIVITY_LIKE',\n  /** A user has mentioned you in their activity */\n  ActivityMention = 'ACTIVITY_MENTION',\n  /** A user has sent you message */\n  ActivityMessage = 'ACTIVITY_MESSAGE',\n  /** A user has replied to your activity */\n  ActivityReply = 'ACTIVITY_REPLY',\n  /** A user has liked your activity reply */\n  ActivityReplyLike = 'ACTIVITY_REPLY_LIKE',\n  /** A user has replied to activity you have also replied to */\n  ActivityReplySubscribed = 'ACTIVITY_REPLY_SUBSCRIBED',\n  /** An anime you are currently watching has aired */\n  Airing = 'AIRING',\n  /** A user has followed you */\n  Following = 'FOLLOWING',\n  /** A new anime or manga has been added to the site where its related media is on the user's list */\n  RelatedMediaAddition = 'RELATED_MEDIA_ADDITION',\n  /** A user has liked your forum comment */\n  ThreadCommentLike = 'THREAD_COMMENT_LIKE',\n  /** A user has mentioned you in a forum comment */\n  ThreadCommentMention = 'THREAD_COMMENT_MENTION',\n  /** A user has replied to your forum comment */\n  ThreadCommentReply = 'THREAD_COMMENT_REPLY',\n  /** A user has liked your forum thread */\n  ThreadLike = 'THREAD_LIKE',\n  /** A user has commented in one of your subscribed forum threads */\n  ThreadSubscribed = 'THREAD_SUBSCRIBED',\n}\n\n/** Recommendation rating enums */\nexport enum RecommendationRating {\n  NoRating = 'NO_RATING',\n  RateDown = 'RATE_DOWN',\n  RateUp = 'RATE_UP',\n}\n\n/** Recommendation sort enums */\nexport enum RecommendationSort {\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  Rating = 'RATING',\n  RatingDesc = 'RATING_DESC',\n}\n\n/** Review rating enums */\nexport enum ReviewRating {\n  DownVote = 'DOWN_VOTE',\n  NoVote = 'NO_VOTE',\n  UpVote = 'UP_VOTE',\n}\n\n/** Review sort enums */\nexport enum ReviewSort {\n  CreatedAt = 'CREATED_AT',\n  CreatedAtDesc = 'CREATED_AT_DESC',\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  Rating = 'RATING',\n  RatingDesc = 'RATING_DESC',\n  Score = 'SCORE',\n  ScoreDesc = 'SCORE_DESC',\n  UpdatedAt = 'UPDATED_AT',\n  UpdatedAtDesc = 'UPDATED_AT_DESC',\n}\n\n/** Revision history actions */\nexport enum RevisionHistoryAction {\n  Create = 'CREATE',\n  Edit = 'EDIT',\n}\n\n/** Media list scoring type */\nexport enum ScoreFormat {\n  /** An integer from 0-10 */\n  Point_10 = 'POINT_10',\n  /** An integer from 0-100 */\n  Point_100 = 'POINT_100',\n  /** A float from 0-10 with 1 decimal place */\n  Point_10Decimal = 'POINT_10_DECIMAL',\n  /** An integer from 0-3. Should be represented in Smileys. 0 => No Score, 1 => :(, 2 => :|, 3 => :) */\n  Point_3 = 'POINT_3',\n  /** An integer from 0-5. Should be represented in Stars */\n  Point_5 = 'POINT_5',\n}\n\n/** Site trend sort enums */\nexport enum SiteTrendSort {\n  Change = 'CHANGE',\n  ChangeDesc = 'CHANGE_DESC',\n  Count = 'COUNT',\n  CountDesc = 'COUNT_DESC',\n  Date = 'DATE',\n  DateDesc = 'DATE_DESC',\n}\n\n/** The primary language of the voice actor */\nexport enum StaffLanguage {\n  /** English */\n  English = 'ENGLISH',\n  /** French */\n  French = 'FRENCH',\n  /** German */\n  German = 'GERMAN',\n  /** Hebrew */\n  Hebrew = 'HEBREW',\n  /** Hungarian */\n  Hungarian = 'HUNGARIAN',\n  /** Italian */\n  Italian = 'ITALIAN',\n  /** Japanese */\n  Japanese = 'JAPANESE',\n  /** Korean */\n  Korean = 'KOREAN',\n  /** Portuguese */\n  Portuguese = 'PORTUGUESE',\n  /** Spanish */\n  Spanish = 'SPANISH',\n}\n\n/** The names of the staff member */\nexport interface StaffNameInput {\n  /** Other names the character might be referred by */\n  alternative?: Maybe<Array<Maybe<Scalars['String']>>>;\n  /** The person's given name */\n  first?: Maybe<Scalars['String']>;\n  /** The person's surname */\n  last?: Maybe<Scalars['String']>;\n  /** The person's middle name */\n  middle?: Maybe<Scalars['String']>;\n  /** The person's full name in their native language */\n  native?: Maybe<Scalars['String']>;\n}\n\n/** Staff sort enums */\nexport enum StaffSort {\n  Favourites = 'FAVOURITES',\n  FavouritesDesc = 'FAVOURITES_DESC',\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  Language = 'LANGUAGE',\n  LanguageDesc = 'LANGUAGE_DESC',\n  /** Order manually decided by moderators */\n  Relevance = 'RELEVANCE',\n  Role = 'ROLE',\n  RoleDesc = 'ROLE_DESC',\n  SearchMatch = 'SEARCH_MATCH',\n}\n\n/** Studio sort enums */\nexport enum StudioSort {\n  Favourites = 'FAVOURITES',\n  FavouritesDesc = 'FAVOURITES_DESC',\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  Name = 'NAME',\n  NameDesc = 'NAME_DESC',\n  SearchMatch = 'SEARCH_MATCH',\n}\n\n/** Submission sort enums */\nexport enum SubmissionSort {\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n}\n\n/** Submission status */\nexport enum SubmissionStatus {\n  Accepted = 'ACCEPTED',\n  PartiallyAccepted = 'PARTIALLY_ACCEPTED',\n  Pending = 'PENDING',\n  Rejected = 'REJECTED',\n}\n\n/** Thread comments sort enums */\nexport enum ThreadCommentSort {\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n}\n\n/** Thread sort enums */\nexport enum ThreadSort {\n  CreatedAt = 'CREATED_AT',\n  CreatedAtDesc = 'CREATED_AT_DESC',\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  IsSticky = 'IS_STICKY',\n  RepliedAt = 'REPLIED_AT',\n  RepliedAtDesc = 'REPLIED_AT_DESC',\n  ReplyCount = 'REPLY_COUNT',\n  ReplyCountDesc = 'REPLY_COUNT_DESC',\n  SearchMatch = 'SEARCH_MATCH',\n  Title = 'TITLE',\n  TitleDesc = 'TITLE_DESC',\n  UpdatedAt = 'UPDATED_AT',\n  UpdatedAtDesc = 'UPDATED_AT_DESC',\n  ViewCount = 'VIEW_COUNT',\n  ViewCountDesc = 'VIEW_COUNT_DESC',\n}\n\n/** User sort enums */\nexport enum UserSort {\n  ChaptersRead = 'CHAPTERS_READ',\n  ChaptersReadDesc = 'CHAPTERS_READ_DESC',\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  SearchMatch = 'SEARCH_MATCH',\n  Username = 'USERNAME',\n  UsernameDesc = 'USERNAME_DESC',\n  WatchedTime = 'WATCHED_TIME',\n  WatchedTimeDesc = 'WATCHED_TIME_DESC',\n}\n\n/** The language the user wants to see staff and character names in */\nexport enum UserStaffNameLanguage {\n  /** The staff or character's name in their native language */\n  Native = 'NATIVE',\n  /** The romanization of the staff or character's native name */\n  Romaji = 'ROMAJI',\n  /** The romanization of the staff or character's native name, with western name ordering */\n  RomajiWestern = 'ROMAJI_WESTERN',\n}\n\n/** User statistics sort enum */\nexport enum UserStatisticsSort {\n  Count = 'COUNT',\n  CountDesc = 'COUNT_DESC',\n  Id = 'ID',\n  IdDesc = 'ID_DESC',\n  MeanScore = 'MEAN_SCORE',\n  MeanScoreDesc = 'MEAN_SCORE_DESC',\n  Progress = 'PROGRESS',\n  ProgressDesc = 'PROGRESS_DESC',\n}\n\n/** The language the user wants to see media titles in */\nexport enum UserTitleLanguage {\n  /** The official english title */\n  English = 'ENGLISH',\n  /** The official english title, stylised by media creator */\n  EnglishStylised = 'ENGLISH_STYLISED',\n  /** Official title in it's native language */\n  Native = 'NATIVE',\n  /** Official title in it's native language, stylised by media creator */\n  NativeStylised = 'NATIVE_STYLISED',\n  /** The romanization of the native language title */\n  Romaji = 'ROMAJI',\n  /** The romanization of the native language title, stylised by media creator */\n  RomajiStylised = 'ROMAJI_STYLISED',\n}\n\nexport type SearchQueryVariables = Exact<{\n  page?: Maybe<Scalars['Int']>;\n  perPage?: Maybe<Scalars['Int']>;\n  type?: Maybe<MediaType>;\n  search?: Maybe<Scalars['String']>;\n  sort?: Maybe<Array<Maybe<MediaSort>> | Maybe<MediaSort>>;\n}>;\n\nexport type SearchQuery = {\n  Page?: Maybe<{\n    pageInfo?: Maybe<PageInfoFragment>;\n    media?: Maybe<Array<Maybe<MediaFragment>>>;\n  }>;\n};\n\nexport type PageInfoFragment = {\n  total?: Maybe<number>;\n  currentPage?: Maybe<number>;\n  lastPage?: Maybe<number>;\n  perPage?: Maybe<number>;\n  hasNextPage?: Maybe<boolean>;\n};\n\nexport type MediaFragment = {\n  id: number;\n  format?: Maybe<MediaFormat>;\n  status?: Maybe<MediaStatus>;\n  countryOfOrigin?: Maybe<any>;\n  popularity?: Maybe<number>;\n  averageScore?: Maybe<number>;\n  meanScore?: Maybe<number>;\n  isAdult?: Maybe<boolean>;\n  genres?: Maybe<Array<Maybe<string>>>;\n  duration?: Maybe<number>;\n  episodes?: Maybe<number>;\n  chapters?: Maybe<number>;\n  title?: Maybe<TitleFragment>;\n  startDate?: Maybe<DateFragment>;\n  endDate?: Maybe<DateFragment>;\n  coverImage?: Maybe<CoverImageFragment>;\n  studios?: Maybe<{\n    nodes?: Maybe<Array<Maybe<{ id: number; name: string }>>>;\n  }>;\n};\n\nexport type TitleFragment = {\n  english?: Maybe<string>;\n  romaji?: Maybe<string>;\n  native?: Maybe<string>;\n};\n\nexport type CoverImageFragment = {\n  large?: Maybe<string>;\n  color?: Maybe<string>;\n};\n\nexport type DateFragment = { year?: Maybe<number> };\n","import React from 'react';\nimport { Maybe } from 'shared/maybe';\nimport {\n  MediaFormat,\n  MediaFragment,\n} from 'services/anilist-api/generated/types';\nimport classes from './format.module.pcss';\n\nconst addS = (x: number) => (x > 1 ? 's' : '');\n\nconst format = (x: Maybe<number>, name: string) =>\n  (x && ` • ${x} ${name}${addS(x)}`) || undefined;\n\ninterface FormatProps {\n  media: MediaFragment;\n}\n\nexport const Format: React.FC<FormatProps> = ({ media }) => {\n  if (!media.format) return <></>;\n  let description: Maybe<string>;\n  switch (media.format) {\n    case MediaFormat.Manga:\n    case MediaFormat.Novel:\n    case MediaFormat.OneShot:\n      description = format(media.chapters, 'chapter');\n      break;\n    case MediaFormat.Movie:\n    case MediaFormat.Music:\n      description = format(media.duration, 'min');\n      break;\n    default:\n      description = format(media.episodes, 'episode');\n      break;\n  }\n  return (\n    <div className={classes.format}>\n      {media.format.split('_').join(' ')}\n      {description}\n    </div>\n  );\n};\n","import React from 'react';\nimport classes from './svg.module.pcss';\n\ninterface SvgPropsBase {\n  name: string;\n  fill?: string;\n}\n\ninterface SvgProps extends SvgPropsBase {\n  src: string;\n  prefix?: string;\n}\n\nexport const Svg: React.FC<SvgProps> = ({ src, name, prefix = '', fill }) => {\n  return (\n    <svg className={classes.svg} style={{ fill }}>\n      <use href={`${src}#${prefix}${name}`} />\n    </svg>\n  );\n};\n\nexport const withSprite: (\n  src: string,\n  prefix?: string\n) => React.FC<SvgPropsBase> = (src, prefix) => {\n  return ({ name, fill }) => (\n    <Svg src={src} name={name} prefix={prefix} fill={fill} />\n  );\n};\n","export default \"__VITE_ASSET__21512942__\"","export default \"__VITE_ASSET__0329f4fe__\"","/** ISO 3166-1 alpha-2 country code */\n\nexport const CountryCodeMap: Map<string, string> = new Map([\n  ['JP', 'japan'],\n  ['KR', 'south-korea'],\n  ['CN', 'china'],\n  ['TW', 'taiwan'],\n]);\n","export type Maybe<T> = T | null | undefined;\n\nexport function none<T>(maybeT: Maybe<T>): boolean {\n  return maybeT === undefined || maybeT === null;\n}\n\nexport function just<T>(maybeT: Maybe<T>): boolean {\n  return !none(maybeT);\n}\n\nexport type Op<A, B> = (a: A) => B;\nexport type OpMaybe<A, B> = (maybeA: Maybe<A>) => Maybe<B>;\nexport type GetMaybe<A, B> = (a: A) => Maybe<B>;\n\nexport function mapGetter<A, B>(mapAB: Map<A, B>): OpMaybe<A, B> {\n  return (maybeA: Maybe<A>) => maybeA && mapAB.get(maybeA);\n}\n\nexport class MaybeUtils {\n  static funcMap<A, B>(func: Op<A, B>): OpMaybe<A, B> {\n    return (maybeA: Maybe<A>): Maybe<B> => maybeA && func(maybeA);\n  }\n\n  static varMap<A, B>(maybeA: Maybe<A>): (op: Op<A, B>) => Maybe<B> {\n    return (func: Op<A, B>): Maybe<B> => maybeA && func(maybeA);\n  }\n\n  static strictMap<A, B>(maybeA: Maybe<A>, func: Op<A, B>): Maybe<B> {\n    return maybeA && func(maybeA);\n  }\n\n  static apply<A, B>(maybeFunc: Maybe<Op<A, B>>): OpMaybe<A, B> {\n    return (maybeA: Maybe<A>): Maybe<B> =>\n      maybeFunc && MaybeUtils.funcMap(maybeFunc)(maybeA);\n  }\n\n  static bind<A, B>(getMaybe: GetMaybe<A, B>): OpMaybe<A, B> {\n    return (maybeA: Maybe<A>): Maybe<B> => maybeA && getMaybe(maybeA);\n  }\n}\n","import React, { CSSProperties } from 'react';\nimport {\n  MediaFragment,\n  MediaStatus,\n} from 'services/anilist-api/generated/types';\nimport { withSprite } from 'components/svg/svg';\nimport iconsSprite from 'assets/sprites/icons.svg';\nimport flagsSprite from 'assets/sprites/flags.svg';\nimport { CountryCodeMap } from 'shared/country-code';\nimport { mapGetter } from 'shared/maybe';\nimport classes from './cover.module.pcss';\n\nconst Icons = withSprite(iconsSprite);\nconst Flag = withSprite(flagsSprite);\n\nconst StatusMap: Map<MediaStatus, { text: string; color: string }> = new Map([\n  [MediaStatus.NotYetReleased, { text: 'Announced', color: '#ff0' }],\n  [MediaStatus.Releasing, { text: 'Ongoing', color: '#f80' }],\n  [MediaStatus.Hiatus, { text: 'Paused', color: '#888' }],\n  [MediaStatus.Cancelled, { text: 'Cancelled', color: '#333' }],\n  [MediaStatus.Finished, { text: 'Completed', color: '#08f' }],\n]);\nconst getStatus = mapGetter(StatusMap);\nconst getCountry = mapGetter(CountryCodeMap);\n\ninterface MediaProps {\n  media: MediaFragment;\n}\n\nexport const Cover: React.FC<MediaProps> = ({ media }) => {\n  const countryOfOrigin = getCountry(media.countryOfOrigin);\n  const status = getStatus(media.status);\n\n  if (!media.coverImage) return <></>;\n  return (\n    <div className={classes.cover}>\n      {media.coverImage.large && (\n        <img\n          className={classes.cover__image}\n          src={media.coverImage.large}\n          alt={media.title?.english || media.title?.native || 'cover'}\n        />\n      )}\n      {media.isAdult && (\n        <div className={classes.plus18}>\n          <Icons name=\"18-plus\" />\n        </div>\n      )}\n      {status && (\n        <div\n          className={classes.status}\n          style={{ '--color': status.color } as CSSProperties}>\n          {status.text}\n        </div>\n      )}\n      <div className={classes.overlay}>\n        {countryOfOrigin && (\n          <div className={classes.flag} title={countryOfOrigin}>\n            <Flag name={countryOfOrigin} />\n          </div>\n        )}\n        {media.startDate?.year && (\n          <div className={classes.year}>{media.startDate.year}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { withSprite } from 'components/svg/svg';\nimport iconsSprite from 'assets/sprites/icons.svg';\nimport classes from './info.module.pcss';\n\nconst Icons = withSprite(iconsSprite);\n\ninterface InfoProps {\n  info: number | string;\n  icon: string;\n}\n\nexport const Info: React.FC<InfoProps> = ({ info, icon }) => {\n  const text = typeof info === 'number' ? Number(info).toLocaleString() : info;\n  return (\n    <div className={classes.info}>\n      <div className={classes.icon}>\n        <Icons name={icon} />\n      </div>\n      <div>{text}</div>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  MediaFragment,\n  TitleFragment,\n} from 'services/anilist-api/generated/types';\nimport classes from './title.module.pcss';\nimport { Info } from './info';\n\nconst formatTip = (title: TitleFragment) =>\n  `${title.romaji || ''}\\n${title.english || ''}\\n${title.native || ''}`;\n\ninterface MediaProps {\n  media: MediaFragment;\n}\n\nexport const Title: React.FC<MediaProps> = ({ media }) => {\n  if (!media.title) return <></>;\n  return (\n    <div className={classes.header} title={formatTip(media.title)}>\n      <div className={classes.title}>{media.title.romaji}</div>\n      <div className={classes.studio}>\n        {media.studios?.nodes?.[0] && (\n          <Info info={media.studios.nodes[0].name} icon=\"home\" />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { CSSProperties } from 'react';\nimport { MediaFragment } from 'services/anilist-api/generated/types';\nimport classes from './card.module.pcss';\nimport { Genres } from './genres';\nimport { Format } from './format';\nimport { Cover } from './cover';\nimport { Title } from './title';\nimport { Info } from './info';\n\ninterface MediaProps {\n  media: MediaFragment;\n}\n\nexport const Card: React.FC<MediaProps> = ({ media }) => {\n  return (\n    <div\n      className={classes.card}\n      style={\n        {\n          '--card-bg-c': media.coverImage?.color || '#fff',\n          '--card-bg-i':\n            (media.coverImage?.large && `url(${media.coverImage?.large})`) ||\n            'unset',\n        } as CSSProperties\n      }>\n      <Cover media={media} />\n      <div className={classes.container}>\n        <Title media={media} />\n        <Format media={media} />\n        {media.genres && (\n          <div className={classes.genres}>\n            <Genres genres={media.genres} />\n          </div>\n        )}\n        <div className={classes.stats}>\n          {media.averageScore && (\n            <Info info={media.averageScore / 10} icon=\"star\" />\n          )}\n          {media.popularity && <Info info={media.popularity} icon=\"people\" />}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { MediaFragment } from 'services/anilist-api/generated/types';\nimport { Card } from 'components/card/card';\nimport { Maybe } from 'shared/maybe';\nimport classes from './cards.module.pcss';\n\ninterface CardsProps {\n  mediaFragments: Maybe<MediaFragment>[];\n}\n\nexport const Cards: React.FC<CardsProps> = ({ mediaFragments }) => {\n  return (\n    <ul className={classes.cards}>\n      {mediaFragments.map(\n        (fragment) =>\n          fragment && (\n            <li key={fragment?.id}>\n              <Card media={fragment} />\n            </li>\n          )\n      )}\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport classes from './search-bar.module.pcss';\n\ninterface SearchBarProps {\n  onSubmit: (search: string) => void;\n}\n\nexport const SearchBar: React.FC<SearchBarProps> = ({ onSubmit }) => {\n  const [search, setSearch] = useState<string>('');\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onSubmit(search);\n    setSearch('');\n  };\n\n  const handleSearch = (event: React.FormEvent<HTMLInputElement>) => {\n    setSearch(event.currentTarget.value);\n  };\n\n  return (\n    <div className={classes.searchBar}>\n      <form onSubmit={handleSubmit}>\n        <div className={classes.search}>\n          <input\n            className={classes.search__input}\n            type=\"text\"\n            value={search}\n            placeholder=\"hero\"\n            onInput={handleSearch}\n          />\n          <button className={classes.search__button} type=\"submit\">\n            search\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import { MediaSort } from 'services/anilist-api/generated/types';\n\nexport enum Order {\n  NONE = 'none',\n  ASC = 'asc',\n  DESC = 'desc',\n}\n\nexport interface IOrderState {\n  readonly name: string;\n  readonly state: Order;\n  readonly reverse: boolean;\n  readonly map: OrderToSort;\n}\n\nexport type OrderToSort = Record<Order, MediaSort | undefined>;\n\nexport class OrderState implements IOrderState {\n  public readonly name: string;\n  public readonly state: Order;\n  public readonly reverse: boolean;\n  public readonly map: OrderToSort;\n\n  constructor({ name, state, reverse, map }: IOrderState) {\n    this.name = name;\n    this.state = state;\n    this.reverse = reverse;\n    this.map = map;\n  }\n\n  public reset(): OrderState {\n    return new OrderState({\n      ...this,\n      state: Order.NONE,\n    });\n  }\n\n  public next(): OrderState {\n    switch (this.state) {\n      case Order.NONE:\n        return new OrderState({\n          ...this,\n          state: this.reverse ? Order.DESC : Order.ASC,\n        });\n      case Order.ASC:\n        return new OrderState({\n          ...this,\n          state: this.reverse ? Order.NONE : Order.DESC,\n        });\n      case Order.DESC:\n        return new OrderState({\n          ...this,\n          state: this.reverse ? Order.ASC : Order.NONE,\n        });\n    }\n  }\n\n  public toSort(): MediaSort | undefined {\n    return this.map[this.state];\n  }\n}\n","import { MediaSort } from 'services/anilist-api/generated/types';\nimport { IOrderState, Order, OrderState } from './order-state';\n\nexport type OrdersConfig = Record<string, OrderState>;\n\nexport const getConfig = (states: IOrderState[]): OrdersConfig =>\n  states.reduce((acc, init) => {\n    acc[init.name] = new OrderState(init);\n    return acc;\n  }, {} as OrdersConfig);\n\nexport const INIT_ORDER_STATES: IOrderState[] = [\n  {\n    name: 'Popularity',\n    state: Order.NONE,\n    reverse: true,\n    map: {\n      [Order.ASC]: MediaSort.Popularity,\n      [Order.DESC]: MediaSort.PopularityDesc,\n      [Order.NONE]: undefined,\n    },\n  },\n  {\n    name: 'Score',\n    state: Order.NONE,\n    reverse: true,\n    map: {\n      [Order.ASC]: MediaSort.Score,\n      [Order.DESC]: MediaSort.ScoreDesc,\n      [Order.NONE]: undefined,\n    },\n  },\n  {\n    name: 'Release date',\n    state: Order.NONE,\n    reverse: true,\n    map: {\n      [Order.ASC]: MediaSort.StartDate,\n      [Order.DESC]: MediaSort.StartDateDesc,\n      [Order.NONE]: undefined,\n    },\n  },\n  {\n    name: 'Title',\n    state: Order.NONE,\n    reverse: false,\n    map: {\n      [Order.ASC]: MediaSort.TitleRomaji,\n      [Order.DESC]: MediaSort.TitleRomajiDesc,\n      [Order.NONE]: undefined,\n    },\n  },\n];\n","import React from 'react';\nimport icons from 'assets/sprites/icons.svg';\nimport { withSprite } from 'components/svg/svg';\nimport { Order, OrderState } from './order-state';\nimport classes from './order-by.module.pcss';\n\nconst Icon = withSprite(icons);\n\ninterface OrderByProps {\n  order: OrderState;\n  onChange: (name: string) => void;\n}\n\nexport const OrderBy: React.FC<OrderByProps> = ({ order, onChange }) => {\n  const asc = order.state === Order.ASC ? classes.iconActive : '';\n  const desc = order.state === Order.DESC ? classes.iconActive : '';\n\n  const handleClick = () => {\n    onChange(order.name);\n  };\n\n  return (\n    <div>\n      <button className={classes.button} type=\"button\" onClick={handleClick}>\n        {order.name}\n        <div className={classes.order}>\n          <div className={`${classes.icon} ${asc}`}>\n            <Icon name=\"caret-up\" />\n          </div>\n          <div className={`${classes.icon} ${desc}`}>\n            <Icon name=\"caret-down\" />\n          </div>\n        </div>\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { MediaSort } from 'services/anilist-api/generated/types';\nimport { getConfig, INIT_ORDER_STATES, OrdersConfig } from './orders-config';\nimport { OrderBy } from './order-by';\nimport classes from './order-by-group.module.pcss';\n\ninterface OrderByGroupProps {\n  onChange: (mediaSort?: MediaSort) => void;\n}\n\nexport const OrderByGroup: React.FC<OrderByGroupProps> = ({ onChange }) => {\n  const [config, setOrders] = useState<OrdersConfig>(\n    getConfig(INIT_ORDER_STATES)\n  );\n\n  const handleChange = (name: string) => {\n    setOrders((prev) => {\n      const order = prev[name]?.next();\n      if (!order) return prev;\n      onChange(order.toSort());\n      return { ...getConfig(INIT_ORDER_STATES), [name]: order };\n    });\n  };\n\n  return (\n    <ul className={classes.group}>\n      {Object.values(config).map((order) => (\n        <li key={order.name}>\n          <OrderBy order={order} onChange={handleChange} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport classes from './full-loader.module.pcss';\n\nexport const FullLoader: React.FC = () => {\n  return <div className={classes.fullLoader} />;\n};\n","import React, { useState } from 'react';\nimport {\n  UseAnilistApi,\n  useAnilistApi,\n} from 'services/anilist-api/use-anilist-api';\nimport searchQuery from 'services/anilist-api/queries/search-query.graphql';\nimport {\n  MediaSort,\n  SearchQuery,\n  SearchQueryVariables,\n} from 'services/anilist-api/generated/types';\nimport { Paginator } from 'components/paginator/paginator';\nimport { ErrorInfo } from 'components/error-info/error-info';\nimport { Cards } from 'components/cards/cards';\nimport { SearchBar } from 'components/search-bar/search-bar';\nimport { OrderByGroup } from 'components/order-by/order-by-group';\nimport { FullLoader } from 'components/loader/full-loader';\nimport classes from './app.module.css';\n\nconst isResults = (api: UseAnilistApi<SearchQuery>): boolean =>\n  (api.data?.Page?.pageInfo?.total || 0) > 0;\n\nexport function App() {\n  const [variables, setVariables] = useState<SearchQueryVariables>({\n    page: 1,\n    perPage: 10,\n    sort: [],\n  });\n\n  const api = useAnilistApi<SearchQuery, SearchQueryVariables>(\n    searchQuery,\n    variables\n  );\n\n  const handlePageSelect = (page: number) => {\n    console.log('Selected page:', page);\n    setVariables((prev) => ({ ...prev, page }));\n  };\n\n  const handlePerPageSelect = (perPage: number) => {\n    console.log('Selected results per page:', perPage);\n    setVariables((prev) => ({ ...prev, page: 1, perPage }));\n  };\n\n  const PaginatorWrapper = api.data?.Page?.pageInfo && (\n    <div className={classes.paginatorWrapper}>\n      <Paginator\n        pageInfo={api.data.Page.pageInfo}\n        onPageSelect={handlePageSelect}\n        onPerPageSelect={handlePerPageSelect}\n      />\n      {api.isLoading && <FullLoader />}\n    </div>\n  );\n\n  const handleSubmit = (search: string) => {\n    console.log('Search:', search);\n    setVariables((prev) => ({ ...prev, page: 1, search: search || undefined }));\n  };\n\n  const handleOrderBy = (sort?: MediaSort) => {\n    console.log('Order by:', sort);\n    setVariables((prev) => ({ ...prev, page: 1, sort }));\n  };\n\n  const SearchWrapper = (\n    <div className={classes.searchWrapper}>\n      <SearchBar onSubmit={handleSubmit} />\n      {isResults(api) && <OrderByGroup onChange={handleOrderBy} />}\n      {api.isLoading && <FullLoader />}\n    </div>\n  );\n\n  return (\n    <div className={classes.app}>\n      {SearchWrapper}\n      <div>\n        <div className={classes.stateWrapper}>\n          {api.isError && <ErrorInfo error={api.error} />}\n        </div>\n        {!api.isLoading && !isResults(api) && (\n          <div className={classes.searchWrapper}>\n            （＞人＜；） No results for query: &quot;{variables.search}&quot;\n          </div>\n        )}\n        {PaginatorWrapper}\n        {api.data?.Page?.media && (\n          <Cards mediaFragments={api.data.Page.media} />\n        )}\n        {PaginatorWrapper}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from 'components/app/app';\n\nconst initApp = () => {\n  const root = document.createElement('div');\n  root.id = 'root';\n  document.body.append(root);\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    root\n  );\n};\n\ninitApp();\n"],"names":["useState","GraphQLClient","classes","ClientError","Icons","iconsSprite","searchQuery"],"mappings":"0fAIA,KAAM,IAAe,6BAEf,GAAe,AAAC,GACpB,YAAiB,eAAgB,EAAM,UAAY,sBAUnD,EACA,EACwB,MAClB,CAAC,EAAW,GAAcA,mBAAS,IACnC,CAAC,EAAS,GAAcA,mBAAS,IACjC,CAAC,EAAO,GAAYA,mBAAkB,MACtC,CAAC,EAAM,GAAWA,mBAAyB,MAE3C,EAAkB,GAAI,oBAExB,GAAY,SAAY,GACf,MACA,MACF,SACL,MACI,GAAS,KAAM,IAAIC,kBAAc,GAAc,CACnD,OAAQ,EAAgB,SACvB,QAAwB,EAAO,KAC1B,SACD,WACC,IAAI,GACP,GAAa,OACL,MACF,cAGA,iCAIL,SACI,KAAK,KAAM,MAEhB,IAAM,GACK,UAEjB,CAAC,IAEG,CAAE,YAAW,UAAS,QAAO,QCvDtC,GAAI,GAAM,CAAC,KAAO,WAAW,YAAc,CAAC,CAAC,KAAO,sBAAsB,UAAY,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,UAAU,oBAAsB,CAAC,CAAC,KAAO,qBAAqB,SAAW,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,KAAO,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,aAAe,CAAC,KAAO,WAAW,MAAQ,KAAK,WAAa,IAAI,CAAC,KAAO,qBAAqB,SAAW,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,YAAY,KAAO,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,aAAe,CAAC,KAAO,WAAW,MAAQ,KAAK,WAAa,IAAI,CAAC,KAAO,qBAAqB,SAAW,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,KAAO,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,cAAc,WAAa,IAAI,CAAC,KAAO,qBAAqB,SAAW,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,WAAW,KAAO,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,WAAW,WAAa,IAAI,CAAC,KAAO,qBAAqB,SAAW,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,KAAO,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,eAAe,WAAa,KAAK,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,UAAY,CAAC,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,MAAQ,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,UAAU,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,WAAW,MAAQ,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,cAAc,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,YAAY,UAAY,GAAG,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,iBAAiB,KAAO,CAAC,KAAO,OAAO,MAAQ,YAAY,WAAa,OAAO,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,UAAY,CAAC,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,MAAQ,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,UAAU,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,UAAU,MAAQ,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,YAAY,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,MAAQ,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,WAAW,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,iBAAiB,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,WAAa,aAAa,CAAC,KAAO,qBAAqB,KAAO,CAAC,KAAO,OAAO,MAAQ,YAAY,cAAgB,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,aAAa,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,eAAe,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,YAAY,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,WAAW,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,eAAe,UAAY,GAAG,WAAa,OAAO,CAAC,KAAO,qBAAqB,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,cAAgB,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,UAAU,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,MAAM,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,UAAY,GAAG,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,iBAAiB,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,WAAa,OAAO,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,UAAU,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,UAAU,UAAY,CAAC,CAAC,KAAO,WAAW,KAAO,CAAC,KAAO,OAAO,MAAQ,WAAW,MAAQ,CAAC,KAAO,WAAW,MAAQ,OAAO,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,mBAAmB,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,cAAc,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,gBAAgB,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,aAAa,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,aAAa,UAAY,GAAG,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,iBAAiB,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,WAAa,OAAO,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,WAAW,UAAY,GAAG,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,iBAAiB,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,WAAa,OAAO,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,WAAW,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,UAAU,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,YAAY,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,YAAY,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,YAAY,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,cAAc,UAAY,GAAG,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,iBAAiB,KAAO,CAAC,KAAO,OAAO,MAAQ,cAAc,WAAa,OAAO,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,WAAW,UAAY,GAAG,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,UAAY,GAAG,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,MAAM,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,UAAY,GAAG,WAAa,aAAa,CAAC,KAAO,qBAAqB,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,cAAgB,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,eAAe,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,WAAW,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,UAAU,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,UAAU,UAAY,GAAG,WAAa,OAAO,CAAC,KAAO,qBAAqB,KAAO,CAAC,KAAO,OAAO,MAAQ,cAAc,cAAgB,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,oBAAoB,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,UAAY,GAAG,WAAa,IAAI,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,SAAS,UAAY,GAAG,WAAa,OAAO,CAAC,KAAO,qBAAqB,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,cAAgB,CAAC,KAAO,YAAY,KAAO,CAAC,KAAO,OAAO,MAAQ,cAAc,WAAa,GAAG,aAAe,CAAC,KAAO,eAAe,WAAa,CAAC,CAAC,KAAO,QAAQ,KAAO,CAAC,KAAO,OAAO,MAAQ,QAAQ,UAAY,GAAG,WAAa,QAAQ,IAAM,CAAC,MAAQ,EAAE,IAAM,MAAO,EAAI,IAAI,OAAS,CAAC,KAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAu7B,KAAO,kBAAkB,eAAiB,CAAC,KAAO,EAAE,OAAS,IAmB5+P,WAAmC,EAAM,EAAM,CAC7C,GAAI,EAAK,OAAS,iBAChB,EAAK,IAAI,EAAK,KAAK,eACV,EAAK,OAAS,qBAAsB,CAC7C,GAAI,GAAO,EAAK,KAChB,AAAI,EAAK,OAAS,aAChB,EAAK,IAAI,EAAK,KAAK,OAGvB,AAAI,EAAK,cACP,EAAK,aAAa,WAAW,QAAQ,SAAU,EAAW,CACxD,EAA0B,EAAW,KAGrC,EAAK,qBACP,EAAK,oBAAoB,QAAQ,SAAU,EAAK,CAC9C,EAA0B,EAAK,KAG/B,EAAK,aACP,EAAK,YAAY,QAAQ,SAAU,EAAK,CACtC,EAA0B,EAAK,KAKrC,GAAI,GAAiB,GAEpB,AAAC,WAA6B,CAC7B,EAAI,YAAY,QAAQ,SAAU,EAAK,CACrC,GAAI,EAAI,KAAM,CACZ,GAAI,GAAO,GAAI,KACf,EAA0B,EAAK,GAC/B,EAAe,EAAI,KAAK,OAAS,SAKvC,WAAuB,EAAK,EAAM,CAChC,OAAS,GAAI,EAAG,EAAI,EAAI,YAAY,OAAQ,IAAK,CAC/C,GAAI,GAAU,EAAI,YAAY,GAC9B,GAAI,EAAQ,MAAQ,EAAQ,KAAK,OAAS,EACxC,MAAO,IAKb,YAAkB,EAAK,EAAe,CAEpC,GAAI,GAAS,CACX,KAAM,EAAI,KACV,YAAa,CAAC,EAAc,EAAK,KAEnC,AAAI,EAAI,eAAe,QACrB,GAAO,IAAM,EAAI,KAInB,GAAI,GAAS,EAAe,IAAkB,GAAI,KAC9C,EAAU,GAAI,KACd,EAAU,GAAI,KAKlB,IAHA,EAAO,QAAQ,SAAU,EAAS,CAChC,EAAQ,IAAI,KAEP,EAAQ,KAAO,GAAG,CACvB,GAAI,GAAW,EACf,EAAU,GAAI,KACd,EAAS,QAAQ,SAAU,EAAS,CAClC,GAAI,CAAC,EAAQ,IAAI,GAAU,CACzB,EAAQ,IAAI,GACZ,GAAI,GAAY,EAAe,IAAY,GAAI,KAC/C,EAAU,QAAQ,SAAU,EAAU,CACpC,EAAQ,IAAI,QAKpB,SAAQ,QAAQ,SAAU,EAAS,CACjC,GAAI,GAAK,EAAc,EAAK,GAC5B,AAAI,GACF,EAAO,YAAY,KAAK,KAGrB,EAIW,GAAS,EAAK,2MCvGpC,KAAM,IAAc,GACd,GAAc,EACd,EAAO,EAMA,GAAkC,CAAC,CAAE,WAAU,cAAe,MACnE,GAAe,AAAC,GAAgD,GAC3D,OAAO,EAAM,cAAc,gCAInC,MAAD,CAAK,UAAWC,EAAQ,yBACrB,MAAD,KAAK,YAAU,EAAS,MAAM,gCAC7B,SAAD,CACE,UAAWA,EAAQ,cACnB,KAAK,WACL,MAAO,EAAS,SAAW,GAC3B,SAAU,GACT,MAAM,GAAc,GAClB,KAAK,IACL,IAAI,CAAC,EAAG,IAAM,EAAI,EAAI,GACtB,IAAI,AAAC,mBACH,SAAD,CAAQ,IAAK,EAAM,MAAO,GACvB,sLC5BS,EAAsB,OACrC,GAAM,SAAW,EAAI,OAAY,EAAM,eAGxB,EAAsB,OACrC,GAAM,SAAW,EAAI,OAAY,EAAM,EAAM,OAAS,QAGlD,IAAW,CACtB,EACA,EACA,IACa,IACT,GAAW,EAAO,EAAS,IACpB,EAAW,EAAI,EAAI,KAE1B,GAAS,EAAS,IACb,EAAS,EAAO,EAAO,OAE1B,GAAO,KAAK,MAAM,EAAS,MAE7B,GAAQ,EAAU,IACd,EAAQ,EAAI,EAAI,IAChB,EAAQ,EAAW,EAAW,KAElC,GAAM,EAAQ,EAAS,WACrB,EAAM,EAAO,EAAO,IACpB,EAAM,EAAS,EAAS,EAIvB,MAAM,EAAM,EAAI,GACpB,KAAK,GACL,IAAI,CAAC,EAAK,IAAU,EAAM,iDChClB,GAIR,CAAC,CAAE,OAAM,WAAU,6BAEnB,SAAD,CACE,KAAK,SACL,UAAWA,GAAQ,OACnB,WACA,QAAS,IAAM,EAAQ,IACtB,wGCXM,IAIR,CAAC,CAAE,OAAM,OAAM,cAAe,MAC3B,CAAC,EAAO,GAAYF,mBAAS,GAE7B,EAAc,AAAC,GAA6C,IAC5D,GAAW,CAAC,EAAM,cAAc,QACzB,EAAW,EAAO,EAAO,IACzB,EAAW,EAAI,EAAI,IACrB,KAAK,KAAK,KAGf,EAAe,AAAC,GAA4C,GAC1D,mBACG,2BAIR,OAAD,CAAM,UAAWE,EAAQ,KAAM,SAAU,mBACtC,MAAD,CAAK,UAAWA,EAAQ,sBACrB,QAAD,CACE,UAAWA,EAAQ,MACnB,KAAK,SACL,QACA,IAAK,EACL,IAAK,EACL,KAAM,EACN,SAAQ,GACR,QAAS,oBAEV,SAAD,CACE,KAAK,SACL,UAAWA,EAAQ,OACnB,SAAU,IAAU,GACnB,IAAU,GAAQ,SChCvB,GAAe,EAMR,GAAoC,CAAC,CAAE,WAAU,cAAe,MACrE,GAAU,EAAS,aAAe,EAClC,EAAO,EAAS,UAAY,EAE5B,EAAQ,GAAS,EAAS,EAAM,IAChC,EAAe,GAAK,KAAW,EAC/B,EAAc,GAAK,KAAW,EAE9B,EAAmB,AAAC,GAAiB,GAChC,2BAIR,KAAD,CAAI,UAAWA,EAAQ,UACpB,CAAC,mBACC,KAAD,CAAI,UAAW,GAAGA,EAAQ,QAAQA,EAAQ,yBACvC,EAAD,CAAQ,KAAM,EAAG,QAAS,KAG7B,EAAM,IAAI,AAAC,mBAEP,KAAD,CAAI,IAAK,GACN,IAAQ,kBACN,GAAD,CAAW,KAAM,EAAK,OAAY,SAAU,oBAE3C,EAAD,CAAQ,KAAM,EAAK,QAAS,MAKnC,CAAC,mBACC,KAAD,CAAI,UAAW,GAAGA,EAAQ,QAAQA,EAAQ,wBACvC,EAAD,CAAQ,KAAM,EAAM,QAAS,OClC1B,GAAsC,CAAC,CAClD,WACA,eACA,qBACI,IACA,CAAC,EAAS,OAAS,EAAS,QAAU,+CAEpC,GAAmB,AAAC,GAAiB,GAC5B,IAGT,EAAsB,AAAC,GAAiB,GAC5B,2BAIf,MAAD,CAAK,UAAWA,GAAQ,2BACrB,GAAD,CAAU,WAAoB,SAAU,oBACvC,GAAD,CAAS,WAAoB,SAAU,MCtBhC,GAAkD,CAAC,CAAE,2BAE7D,MAAD,qBACG,MAAD,qBACG,OAAD,KAAO,KAAK,UAAU,EAAO,KAAM,MCH9B,GAAsC,CAAC,CAAE,WAC/C,EAGD,YAAiBC,oBACX,GAAD,CAAiB,UAEtB,YAAiB,uBACX,MAAD,KAAM,EAAM,SAEjB,MAAO,IAAU,yBACX,MAAD,KAAM,mBAGZ,MAAD,qBACG,MAAD,qBACG,OAAD,KAAO,KAAK,UAAU,EAAO,KAAM,sBAd/B,MAAD,KAAK,mVCNH,IAAgD,CAAC,CAAE,4BAE3D,KAAD,CAAI,UAAWD,EAAQ,cACpB,EAAO,IAAI,AAAC,mBACV,KAAD,CAAI,IAAK,mBACN,MAAD,CAAK,UAAWA,EAAQ,cAAe,SCcrC,GAAL,UAAK,EAAL,MACA,cACI,YAFC,cAMA,GAAL,UAAK,EAAL,aAEO,yBAEA,yBAEA,uBAEF,iBAEH,SAVG,cAoBA,GAAL,UAAK,EAAL,WACK,wBACI,oBACT,cACI,oBACC,yBACI,uBACP,kBACI,cARD,cAiCA,GAAL,UAAK,EAAL,cAEQ,oBAEN,oBAEM,eANH,cAUA,GAAL,UAAK,EAAL,cACQ,8BACI,uBACZ,cACI,sBAEG,mBACL,kBACI,0BACG,iBATJ,cAuBA,GAAL,UAAK,EAAL,YACM,2BACK,0BACP,yBACO,mBAJN,cAkBA,GAAL,UAAK,EAAL,SAEG,gBAEA,gBAEA,gBAEA,cAEF,gBAEI,iBAEJ,gBAEI,eAEL,eAEK,aApBA,cAwCA,GAAL,UAAK,EAAL,aACO,6BACI,+BACH,+BACI,6BACP,yBACI,kCACI,yCACI,4CACF,8CACI,8CACL,4CACI,6CACJ,4CACI,qCACZ,0BACI,2BACJ,0BACI,kCACG,yCACI,iCACb,sBACI,sBACL,oBACI,yBACA,6BACI,2BACP,sBACI,4BACC,iCACI,sBA9BR,cAkCA,GAAL,UAAK,EAAL,aAEO,sBAEF,oBAEA,mBAED,oBAEE,uBAEC,cAZF,cAgBA,IAAL,UAAK,EAAL,WAEK,kBAEF,UAJE,gBAQA,IAAL,UAAK,EAAL,cAEQ,2BAEC,0BAEF,0BAEE,yBAEH,mBAEH,iBAEC,mBAEC,mBAED,qBAEG,sBAEH,mBAEC,qBAEA,YA1BA,gBA6BA,IAAL,UAAK,EAAL,QAEE,gBAEE,kBAEA,kBAEA,WARC,gBAYA,GAAL,UAAK,EAAL,YACM,0BACI,2BACJ,0BACI,0BACL,yBACI,2BACH,0BACI,6BACF,8BACI,2BACR,sBACI,mBACR,cACI,uBACI,8BACI,0BACT,oBACI,2BACE,2BACF,6BACI,2BACP,sBACI,6BACE,mCACI,mCACL,iCACI,kCACJ,iCACI,+BACP,0BACI,uBACR,kBACI,wBACC,6BACI,4BACN,wBACI,iBArCJ,cAyCA,IAAL,UAAK,EAAL,SAEG,oBAEI,yBAEC,sBAEL,gBAEA,mBAEG,mBAEH,oBAEI,2BAEE,iBAlBJ,gBAsBA,GAAL,UAAK,EAAL,aAEO,uBAED,oBAEF,0BAEQ,+BAEL,cAVF,cAwBA,IAAL,UAAK,EAAL,QACE,kBACI,sBACD,wBACI,oBACT,cACI,oBACC,yBACI,6BACD,8BACI,0BACT,oBACI,wBACD,0BACI,kBAdL,gBAkBA,IAAL,UAAK,EAAL,SAEG,gBAEA,UAJE,gBAOA,IAAL,UAAK,EAAL,QACE,aACD,eACG,gBACF,gBACE,gBACF,gBACE,iBACD,UARE,gBAYA,IAAL,UAAK,EAAL,SAEG,oBAEI,yBAEA,wBAEA,+BAEO,oCAEH,kCAEA,iCAEA,iCAEA,oCAEE,gCAEN,uBAEF,wBAEI,iBA1BJ,gBAsCA,IAAL,UAAK,EAAL,gBAEU,kCAEG,qCAEA,mCAEF,qCAEI,gDAEM,qCAEjB,qBAEG,mCAEW,6CAEH,6CAEG,8CAEF,oCAER,iCAEM,sBA5BT,gBAgCA,IAAL,UAAK,EAAL,YACM,uBACA,qBACF,YAHC,gBAOA,IAAL,UAAK,EAAL,MACA,cACI,mBACA,sBACI,gBAJH,gBAQA,IAAL,UAAK,EAAL,YACM,qBACF,mBACA,YAHC,gBAOA,IAAL,UAAK,EAAL,aACO,6BACI,uBACX,cACI,mBACA,sBACI,sBACL,oBACI,yBACA,6BACI,oBAVN,gBAcA,IAAL,UAAK,EAAL,UACI,gBACF,SAFG,gBAMA,IAAL,UAAK,EAAL,YAEM,uBAEC,8BAEM,6BAER,oBAEA,YAVA,gBAcA,IAAL,UAAK,EAAL,UACI,sBACI,sBACL,oBACI,oBACL,kBACI,cAND,gBAUA,IAAL,UAAK,EAAL,WAEK,mBAED,kBAEA,kBAEA,qBAEG,sBAEF,qBAEC,oBAEF,sBAEI,uBAEH,YApBA,gBAsCA,IAAL,UAAK,EAAL,cACQ,8BACI,uBACZ,cACI,qBACE,0BACI,4BAEH,mBACL,kBACI,0BACG,iBAXJ,gBAeA,IAAL,UAAK,EAAL,cACQ,8BACI,uBACZ,cACI,iBACF,kBACI,0BACG,iBAPJ,gBAWA,IAAL,UAAK,EAAL,MACA,cACI,YAFC,gBAMA,IAAL,UAAK,EAAL,YACM,+BACS,+BACV,qBACC,aAJD,gBAQA,IAAL,UAAK,EAAL,MACA,cACI,YAFC,gBAMA,IAAL,UAAK,EAAL,aACO,6BACI,uBACX,cACI,qBACE,wBACC,6BACI,+BACH,+BACI,iCACH,uBACN,oBACI,yBACA,6BACI,8BACJ,6BACI,oBAhBN,gBAoBA,IAAL,UAAK,EAAL,gBACU,mCACI,0BACd,cACI,wBACK,0BACH,0BACI,8BACD,iCACI,sBATR,gBAaA,IAAL,UAAK,EAAL,UAEI,kBAEA,yBAEO,mBANN,gBAUA,IAAL,UAAK,EAAL,SACG,oBACI,kBACP,cACI,sBACG,6BACI,6BACL,0BACI,kBARL,gBAYA,IAAL,UAAK,EAAL,WAEK,4BAEQ,4BAET,0BAEQ,2BAER,0BAEQ,oBAZP,2DCvpBZ,KAAM,IAAO,AAAC,GAAe,EAAI,EAAI,IAAM,GAErC,EAAS,CAAC,EAAkB,IAC/B,GAAK,WAAM,KAAK,IAAO,GAAK,MAAS,OAM3B,GAAgC,CAAC,CAAE,WAAY,IACtD,CAAC,EAAM,kDACP,UACI,EAAM,YACP,GAAY,UACZ,GAAY,UACZ,GAAY,UACD,EAAO,EAAM,SAAU,qBAElC,GAAY,UACZ,GAAY,QACD,EAAO,EAAM,SAAU,uBAGvB,EAAO,EAAM,SAAU,wCAItC,MAAD,CAAK,UAAWA,GAAQ,QACrB,EAAM,OAAO,MAAM,KAAK,KAAK,KAC7B,2CCxBM,IAA0B,CAAC,CAAE,MAAK,OAAM,SAAS,GAAI,0BAE7D,MAAD,CAAK,UAAWA,GAAQ,IAAK,MAAO,CAAE,yBACnC,MAAD,CAAK,KAAM,GAAG,KAAO,IAAS,OAKvB,EAGiB,CAAC,EAAK,IAC3B,CAAC,CAAE,OAAM,0BACb,GAAD,CAAK,MAAU,OAAY,SAAgB,SC1B/C,MAAe,iCCAA,mCCEF,IAAsC,GAAI,KAAI,CACzD,CAAC,KAAM,SACP,CAAC,KAAM,eACP,CAAC,KAAM,SACP,CAAC,KAAM,wBCQuB,EAAiC,OACxD,AAAC,IAAqB,GAAU,EAAM,IAAI,2TCHnD,KAAME,IAAQ,EAAWC,GACnB,GAAO,EAAW,IAElB,GAA+D,GAAI,KAAI,CAC3E,CAAC,EAAY,eAAgB,CAAE,KAAM,YAAa,MAAO,SACzD,CAAC,EAAY,UAAW,CAAE,KAAM,UAAW,MAAO,SAClD,CAAC,EAAY,OAAQ,CAAE,KAAM,SAAU,MAAO,SAC9C,CAAC,EAAY,UAAW,CAAE,KAAM,YAAa,MAAO,SACpD,CAAC,EAAY,SAAU,CAAE,KAAM,YAAa,MAAO,WAE/C,GAAY,GAAU,IACtB,GAAa,GAAU,IAMhB,GAA8B,CAAC,CAAE,WAAY,gBAClD,GAAkB,GAAW,EAAM,iBACnC,EAAS,GAAU,EAAM,cAE1B,GAAM,2BAER,MAAD,CAAK,UAAWH,EAAQ,OACrB,EAAM,WAAW,uBACf,MAAD,CACE,UAAWA,EAAQ,aACnB,IAAK,EAAM,WAAW,MACtB,IAAK,MAAM,QAAN,cAAa,UAAW,MAAM,QAAN,cAAa,SAAU,UAGvD,EAAM,yBACJ,MAAD,CAAK,UAAWA,EAAQ,wBACrBE,GAAD,CAAO,KAAK,aAGf,mBACE,MAAD,CACE,UAAWF,EAAQ,OACnB,MAAO,CAAE,UAAW,EAAO,QAC1B,EAAO,sBAGX,MAAD,CAAK,UAAWA,EAAQ,SACrB,mBACE,MAAD,CAAK,UAAWA,EAAQ,KAAM,MAAO,mBAClC,GAAD,CAAM,KAAM,KAGf,MAAM,YAAN,cAAiB,uBACf,MAAD,CAAK,UAAWA,EAAQ,MAAO,EAAM,UAAU,oNCzDzD,KAAM,IAAQ,EAAWG,GAOZ,EAA4B,CAAC,CAAE,OAAM,UAAW,MACrD,GAAO,MAAO,IAAS,SAAW,OAAO,GAAM,iBAAmB,yBAErE,MAAD,CAAK,UAAWH,GAAQ,sBACrB,MAAD,CAAK,UAAWA,GAAQ,sBACrB,GAAD,CAAO,KAAM,qBAEd,MAAD,KAAM,KCXN,GAAY,AAAC,GACjB,GAAG,EAAM,QAAU;AAAA,EAAO,EAAM,SAAW;AAAA,EAAO,EAAM,QAAU,KAMvD,GAA8B,CAAC,CAAE,WAAY,eACnD,GAAM,sBAER,MAAD,CAAK,UAAWA,EAAQ,OAAQ,MAAO,GAAU,EAAM,wBACpD,MAAD,CAAK,UAAWA,EAAQ,OAAQ,EAAM,MAAM,wBAC3C,MAAD,CAAK,UAAWA,EAAQ,QACrB,SAAM,UAAN,cAAe,QAAf,cAAuB,qBACrB,EAAD,CAAM,KAAM,EAAM,QAAQ,MAAM,GAAG,KAAM,KAAK,6CCT3C,GAA6B,CAAC,CAAE,WAAY,kCAEpD,MAAD,CACE,UAAWA,EAAQ,KACnB,MACE,CACE,cAAe,MAAM,aAAN,cAAkB,QAAS,OAC1C,cACG,MAAM,aAAN,cAAkB,QAAS,OAAO,KAAM,aAAN,cAAkB,UACrD,0BAGL,GAAD,CAAO,0BACN,MAAD,CAAK,UAAWA,EAAQ,2BACrB,GAAD,CAAO,0BACN,GAAD,CAAQ,UACP,EAAM,wBACJ,MAAD,CAAK,UAAWA,EAAQ,wBACrB,GAAD,CAAQ,OAAQ,EAAM,0BAGzB,MAAD,CAAK,UAAWA,EAAQ,OACrB,EAAM,8BACJ,EAAD,CAAM,KAAM,EAAM,aAAe,GAAI,KAAK,SAE3C,EAAM,4BAAe,EAAD,CAAM,KAAM,EAAM,WAAY,KAAK,0DC5BrD,IAA8B,CAAC,CAAE,oCAEzC,KAAD,CAAI,UAAWA,GAAQ,OACpB,EAAe,IACd,AAAC,GACC,mBACG,KAAD,CAAI,IAAK,iBAAU,oBAChB,GAAD,CAAM,MAAO,gTCVd,IAAsC,CAAC,CAAE,cAAe,MAC7D,CAAC,EAAQ,GAAaF,mBAAiB,IAEvC,EAAe,AAAC,GAA4C,GAC1D,mBACG,KACC,KAGN,EAAe,AAAC,GAA6C,GACvD,EAAM,cAAc,+BAI7B,MAAD,CAAK,UAAWE,EAAQ,2BACrB,OAAD,CAAM,SAAU,mBACb,MAAD,CAAK,UAAWA,EAAQ,wBACrB,QAAD,CACE,UAAWA,EAAQ,cACnB,KAAK,OACL,MAAO,EACP,YAAY,OACZ,QAAS,oBAEV,SAAD,CAAQ,UAAWA,EAAQ,eAAgB,KAAK,UAAS,iBC7BvD,GAAL,UAAK,EAAL,QACE,aACD,aACC,SAHG,kBAemC,CAM7C,YAAY,CAAE,OAAM,QAAO,UAAS,OAAoB,MACjD,KAAO,OACP,MAAQ,OACR,QAAU,OACV,IAAM,EAGN,OAAoB,OAClB,IAAI,GAAW,OACjB,MADiB,CAEpB,MAAO,EAAM,QAIV,MAAmB,QAChB,KAAK,WACN,GAAM,WACF,IAAI,GAAW,OACjB,MADiB,CAEpB,MAAO,KAAK,QAAU,EAAM,KAAO,EAAM,WAExC,GAAM,UACF,IAAI,GAAW,OACjB,MADiB,CAEpB,MAAO,KAAK,QAAU,EAAM,KAAO,EAAM,YAExC,GAAM,WACF,IAAI,GAAW,OACjB,MADiB,CAEpB,MAAO,KAAK,QAAU,EAAM,IAAM,EAAM,SAKzC,QAAgC,OAC9B,MAAK,IAAI,KAAK,aCrDZ,IAAY,AAAC,GACxB,EAAO,OAAO,CAAC,EAAK,OACd,EAAK,MAAQ,GAAI,GAAW,GACzB,GACN,IAEQ,GAAmC,CAC9C,CACE,KAAM,aACN,MAAO,EAAM,KACb,QAAS,GACT,IAAK,EACF,EAAM,KAAM,EAAU,YACtB,EAAM,MAAO,EAAU,gBACvB,EAAM,MAAO,SAGlB,CACE,KAAM,QACN,MAAO,EAAM,KACb,QAAS,GACT,IAAK,EACF,EAAM,KAAM,EAAU,OACtB,EAAM,MAAO,EAAU,WACvB,EAAM,MAAO,SAGlB,CACE,KAAM,eACN,MAAO,EAAM,KACb,QAAS,GACT,IAAK,EACF,EAAM,KAAM,EAAU,WACtB,EAAM,MAAO,EAAU,eACvB,EAAM,MAAO,SAGlB,CACE,KAAM,QACN,MAAO,EAAM,KACb,QAAS,GACT,IAAK,EACF,EAAM,KAAM,EAAU,aACtB,EAAM,MAAO,EAAU,iBACvB,EAAM,MAAO,2LC3CpB,KAAM,IAAO,EAAW,GAOX,GAAkC,CAAC,CAAE,QAAO,cAAe,MAChE,GAAM,EAAM,QAAU,EAAM,IAAMA,EAAQ,WAAa,GACvD,EAAO,EAAM,QAAU,EAAM,KAAOA,EAAQ,WAAa,GAEzD,EAAc,IAAM,GACf,EAAM,8BAId,MAAD,qBACG,SAAD,CAAQ,UAAWA,EAAQ,OAAQ,KAAK,SAAS,QAAS,GACvD,EAAM,qBACN,MAAD,CAAK,UAAWA,EAAQ,uBACrB,MAAD,CAAK,UAAW,GAAGA,EAAQ,QAAQ,qBAChC,GAAD,CAAM,KAAK,8BAEZ,MAAD,CAAK,UAAW,GAAGA,EAAQ,QAAQ,qBAChC,GAAD,CAAM,KAAK,2FCpBV,IAA4C,CAAC,CAAE,cAAe,MACnE,CAAC,EAAQ,GAAaF,mBAC1B,GAAU,KAGN,EAAe,AAAC,GAAiB,GAC3B,AAAC,GAAS,YACZ,GAAQ,KAAK,KAAL,cAAY,aACrB,MACI,EAAM,UACR,OAAK,GAAU,KAAf,EAAoC,GAAO,KAF/B,4BAOpB,KAAD,CAAI,UAAWE,GAAQ,OACpB,OAAO,OAAO,GAAQ,IAAI,AAAC,mBACzB,KAAD,CAAI,IAAK,EAAM,sBACZ,GAAD,CAAS,QAAc,SAAU,oICzB9B,IAAuB,oBAC1B,MAAD,CAAK,UAAWA,GAAQ,qUCejC,KAAM,IAAY,AAAC,iCACZ,qBAAM,qBAAM,yBAAU,QAAS,GAAK,gBAErB,kBACd,CAAC,EAAW,GAAgBF,mBAA+B,CAC/D,KAAM,EACN,QAAS,GACT,KAAM,KAGF,EAAM,GACVM,EACA,GAGI,EAAmB,AAAC,GAAiB,SACjC,IAAI,iBAAkB,KACjB,AAAC,UAAe,IAAM,WAG/B,EAAsB,AAAC,GAAoB,SACvC,IAAI,6BAA8B,KAC7B,AAAC,UAAe,IAAM,KAAM,EAAG,cAGxC,EAAmB,SAAI,OAAJ,cAAU,OAAV,cAAgB,2BACtC,MAAD,CAAK,UAAW,EAAQ,kCACrB,GAAD,CACE,SAAU,EAAI,KAAK,KAAK,SACxB,aAAc,EACd,gBAAiB,IAElB,EAAI,2BAAc,GAAD,OAIhB,EAAe,AAAC,GAAmB,SAC/B,IAAI,UAAW,KACV,AAAC,UAAe,IAAM,KAAM,EAAG,OAAQ,GAAU,WAG1D,EAAgB,AAAC,GAAqB,SAClC,IAAI,YAAa,KACZ,AAAC,UAAe,IAAM,KAAM,EAAG,WAGxC,kBACH,MAAD,CAAK,UAAW,EAAQ,+BACrB,GAAD,CAAW,SAAU,IACpB,GAAU,oBAAS,GAAD,CAAc,SAAU,IAC1C,EAAI,2BAAc,GAAD,8BAKnB,MAAD,CAAK,UAAW,EAAQ,KACrB,kBACA,MAAD,qBACG,MAAD,CAAK,UAAW,EAAQ,cACrB,EAAI,yBAAY,GAAD,CAAW,MAAO,EAAI,SAEvC,CAAC,EAAI,WAAa,CAAC,GAAU,oBAC3B,MAAD,CAAK,UAAW,EAAQ,eAAe,+DACD,EAAU,OAAO,KAGxD,EACA,SAAI,OAAJ,cAAU,OAAV,cAAgB,wBACd,GAAD,CAAO,eAAgB,EAAI,KAAK,KAAK,QAEtC,ICrFT,KAAM,IAAU,IAAM,MACd,GAAO,SAAS,cAAc,SAC/B,GAAK,gBACD,KAAK,OAAO,MAEZ,uBACN,EAAM,WAAP,qBACG,GAAD,OAEF,IAIJ"}